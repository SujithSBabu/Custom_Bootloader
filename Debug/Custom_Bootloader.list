
Custom_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08001bdc  08001bdc  00011bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002088  08002088  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  08002088  08002088  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002088  08002088  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002088  08002088  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800208c  0800208c  0001208c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08002090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00000190  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  200002a0  00020110  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002013a  2**0
                  CONTENTS, READONLY
 14 .debug_info   000028b1  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000010e5  00000000  00000000  00022a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002d8  00000000  00000000  00023b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001dc  00000000  00000000  00023df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000035fd  00000000  00000000  00023fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007000  00000000  00000000  000275c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009379  00000000  00000000  0002e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000bd0  00000000  00000000  00037944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00038514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001bc4 	.word	0x08001bc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	08001bc4 	.word	0x08001bc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <bl_send_ack>:
#include "bl_ack_nack_impl.h"


USART_RegDef_Struct* pUsartt2 = USART2;
void bl_send_ack(volatile uint8_t* cmd_code)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
     uint8_t ack_buffer[3];

     uint8_t len = (sizeof(ack_buffer)/sizeof(ack_buffer[0]));
 8000278:	2303      	movs	r3, #3
 800027a:	73fb      	strb	r3, [r7, #15]
     ack_buffer[0] = BL_ACK;
 800027c:	23a5      	movs	r3, #165	; 0xa5
 800027e:	733b      	strb	r3, [r7, #12]
     ack_buffer[1] = *(cmd_code);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	b2db      	uxtb	r3, r3
 8000286:	737b      	strb	r3, [r7, #13]
     ack_buffer[2] = CRC_SUCCESS;
 8000288:	2301      	movs	r3, #1
 800028a:	73bb      	strb	r3, [r7, #14]
     usart_send_bytes(pUsartt2, ack_buffer, len);
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <bl_send_ack+0x34>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	7bfa      	ldrb	r2, [r7, #15]
 8000292:	f107 010c 	add.w	r1, r7, #12
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fbc3 	bl	8000a22 <usart_send_bytes>

}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000000 	.word	0x20000000

080002a8 <bootloader_handle_getVersion_cmd>:
volatile uint8_t bl_reply_buff[20] = {0};
extern uint8_t cmd_code_array[10];
uint8_t len = (sizeof(bl_reply_buff)/sizeof(bl_reply_buff[0]));
USART_RegDef_Struct* pusartT2 = USART2;
void bootloader_handle_getVersion_cmd(volatile uint8_t* packet_buffer)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
     if(bl_crc_verify(packet_buffer))
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 fa12 	bl	80006da <bl_crc_verify>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d03b      	beq.n	8000334 <bootloader_handle_getVersion_cmd+0x8c>
     {
    	 usart_stm32_send_string(pusartT2, "ACK: ");
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <bootloader_handle_getVersion_cmd+0x94>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	491f      	ldr	r1, [pc, #124]	; (8000340 <bootloader_handle_getVersion_cmd+0x98>)
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fdbd 	bl	8000e42 <usart_stm32_send_string>
    	 bl_send_ack(&packet_buffer[1]);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ffcf 	bl	8000270 <bl_send_ack>
    	 usart_stm32_send_string(pusartT2, "(Positive Response, BL_GET_VER_CMD, CRC_SUCCESS)\r\n");
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <bootloader_handle_getVersion_cmd+0x94>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	491b      	ldr	r1, [pc, #108]	; (8000344 <bootloader_handle_getVersion_cmd+0x9c>)
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fdb2 	bl	8000e42 <usart_stm32_send_string>
         uint8_t bl_version = get_bl_version();
 80002de:	f000 f8e3 	bl	80004a8 <get_bl_version>
 80002e2:	4603      	mov	r3, r0
 80002e4:	73bb      	strb	r3, [r7, #14]
         bl_reply_buff[0]   = bl_version;
 80002e6:	4a18      	ldr	r2, [pc, #96]	; (8000348 <bootloader_handle_getVersion_cmd+0xa0>)
 80002e8:	7bbb      	ldrb	r3, [r7, #14]
 80002ea:	7013      	strb	r3, [r2, #0]
         usart_send_string(pusartT2, "BL_Version: ");
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <bootloader_handle_getVersion_cmd+0x94>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4916      	ldr	r1, [pc, #88]	; (800034c <bootloader_handle_getVersion_cmd+0xa4>)
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fb88 	bl	8000a08 <usart_send_string>
         bootloader_response((volatile uint8_t*)bl_reply_buff, len);
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <bootloader_handle_getVersion_cmd+0xa8>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4619      	mov	r1, r3
 80002fe:	4812      	ldr	r0, [pc, #72]	; (8000348 <bootloader_handle_getVersion_cmd+0xa0>)
 8000300:	f000 fa2c 	bl	800075c <bootloader_response>
         usart_send_string(pusartT2, "\r\n\r\n");
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <bootloader_handle_getVersion_cmd+0x94>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4912      	ldr	r1, [pc, #72]	; (8000354 <bootloader_handle_getVersion_cmd+0xac>)
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fb7c 	bl	8000a08 <usart_send_string>
         *packet_buffer = 0;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
         for(uint8_t i=0;i< len;i++)
 8000316:	2300      	movs	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	e006      	b.n	800032a <bootloader_handle_getVersion_cmd+0x82>
         {
        	 bl_reply_buff[i] = 0; //array itself is a pointer
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <bootloader_handle_getVersion_cmd+0xa0>)
 8000320:	2100      	movs	r1, #0
 8000322:	54d1      	strb	r1, [r2, r3]
         for(uint8_t i=0;i< len;i++)
 8000324:	7bfb      	ldrb	r3, [r7, #15]
 8000326:	3301      	adds	r3, #1
 8000328:	73fb      	strb	r3, [r7, #15]
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <bootloader_handle_getVersion_cmd+0xa8>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	7bfa      	ldrb	r2, [r7, #15]
 8000330:	429a      	cmp	r2, r3
 8000332:	d3f3      	bcc.n	800031c <bootloader_handle_getVersion_cmd+0x74>
         }

     }
}
 8000334:	bf00      	nop
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000008 	.word	0x20000008
 8000340:	08001bdc 	.word	0x08001bdc
 8000344:	08001be4 	.word	0x08001be4
 8000348:	2000012c 	.word	0x2000012c
 800034c:	08001c18 	.word	0x08001c18
 8000350:	20000004 	.word	0x20000004
 8000354:	08001c28 	.word	0x08001c28

08000358 <bootloader_handle_getHelp_cmd>:

void bootloader_handle_getHelp_cmd(volatile uint8_t* packet_buffer)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

	if(bl_crc_verify(packet_buffer))
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f000 f9ba 	bl	80006da <bl_crc_verify>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d036      	beq.n	80003da <bootloader_handle_getHelp_cmd+0x82>
	 {
		 usart_stm32_send_string(pusartT2, "ACK: ");
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <bootloader_handle_getHelp_cmd+0x8c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	491d      	ldr	r1, [pc, #116]	; (80003e8 <bootloader_handle_getHelp_cmd+0x90>)
 8000372:	4618      	mov	r0, r3
 8000374:	f000 fd65 	bl	8000e42 <usart_stm32_send_string>
		 bl_send_ack(&packet_buffer[1]);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff77 	bl	8000270 <bl_send_ack>
		 usart_stm32_send_string(pusartT2, "(Positive Response, BL_GET_HELP, CRC_SUCCESS)\r\n");
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <bootloader_handle_getHelp_cmd+0x8c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4919      	ldr	r1, [pc, #100]	; (80003ec <bootloader_handle_getHelp_cmd+0x94>)
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fd5a 	bl	8000e42 <usart_stm32_send_string>
		 get_bl_commands_into_reply_buff();
 800038e:	f000 f893 	bl	80004b8 <get_bl_commands_into_reply_buff>
		 usart_send_string(pusartT2, "BL_Command_Codes: ");
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <bootloader_handle_getHelp_cmd+0x8c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4916      	ldr	r1, [pc, #88]	; (80003f0 <bootloader_handle_getHelp_cmd+0x98>)
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fb35 	bl	8000a08 <usart_send_string>
		 bootloader_response((volatile uint8_t*)bl_reply_buff, len);
 800039e:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <bootloader_handle_getHelp_cmd+0x9c>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	4619      	mov	r1, r3
 80003a4:	4814      	ldr	r0, [pc, #80]	; (80003f8 <bootloader_handle_getHelp_cmd+0xa0>)
 80003a6:	f000 f9d9 	bl	800075c <bootloader_response>
		 usart_send_string(pusartT2, "\r\n\r\n");
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <bootloader_handle_getHelp_cmd+0x8c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4913      	ldr	r1, [pc, #76]	; (80003fc <bootloader_handle_getHelp_cmd+0xa4>)
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fb29 	bl	8000a08 <usart_send_string>
		 *packet_buffer = 0;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i< len;i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	73fb      	strb	r3, [r7, #15]
 80003c0:	e006      	b.n	80003d0 <bootloader_handle_getHelp_cmd+0x78>
		 {
			bl_reply_buff[i] = 0; //array itself is a pointer
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <bootloader_handle_getHelp_cmd+0xa0>)
 80003c6:	2100      	movs	r1, #0
 80003c8:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i< len;i++)
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	3301      	adds	r3, #1
 80003ce:	73fb      	strb	r3, [r7, #15]
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <bootloader_handle_getHelp_cmd+0x9c>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	7bfa      	ldrb	r2, [r7, #15]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	d3f3      	bcc.n	80003c2 <bootloader_handle_getHelp_cmd+0x6a>
		 }
	 }
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000008 	.word	0x20000008
 80003e8:	08001bdc 	.word	0x08001bdc
 80003ec:	08001c30 	.word	0x08001c30
 80003f0:	08001c60 	.word	0x08001c60
 80003f4:	20000004 	.word	0x20000004
 80003f8:	2000012c 	.word	0x2000012c
 80003fc:	08001c28 	.word	0x08001c28

08000400 <bootloader_handle_getChipID_cmd>:

void bootloader_handle_getChipID_cmd(volatile uint8_t* packet_buffer)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	if(bl_crc_verify(packet_buffer))
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f000 f966 	bl	80006da <bl_crc_verify>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d036      	beq.n	8000482 <bootloader_handle_getChipID_cmd+0x82>
	 {
		 usart_stm32_send_string(pusartT2, "ACK: ");
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <bootloader_handle_getChipID_cmd+0x8c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <bootloader_handle_getChipID_cmd+0x90>)
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fd11 	bl	8000e42 <usart_stm32_send_string>
		 bl_send_ack(&packet_buffer[1]);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3301      	adds	r3, #1
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff23 	bl	8000270 <bl_send_ack>
		 usart_stm32_send_string(pusartT2, "(Positive Response, BL_GET_CID, CRC_SUCCESS)\r\n");
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <bootloader_handle_getChipID_cmd+0x8c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4919      	ldr	r1, [pc, #100]	; (8000494 <bootloader_handle_getChipID_cmd+0x94>)
 8000430:	4618      	mov	r0, r3
 8000432:	f000 fd06 	bl	8000e42 <usart_stm32_send_string>
		 get_bl_chip_id_into_reply_buff();
 8000436:	f000 f85f 	bl	80004f8 <get_bl_chip_id_into_reply_buff>
		 usart_send_string(pusartT2, "Chip_ID: ");
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <bootloader_handle_getChipID_cmd+0x8c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4916      	ldr	r1, [pc, #88]	; (8000498 <bootloader_handle_getChipID_cmd+0x98>)
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fae1 	bl	8000a08 <usart_send_string>
		 bootloader_response((volatile uint8_t*)bl_reply_buff, len);
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <bootloader_handle_getChipID_cmd+0x9c>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	4814      	ldr	r0, [pc, #80]	; (80004a0 <bootloader_handle_getChipID_cmd+0xa0>)
 800044e:	f000 f985 	bl	800075c <bootloader_response>
		 usart_send_string(pusartT2, "\r\n\r\n");
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <bootloader_handle_getChipID_cmd+0x8c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4913      	ldr	r1, [pc, #76]	; (80004a4 <bootloader_handle_getChipID_cmd+0xa4>)
 8000458:	4618      	mov	r0, r3
 800045a:	f000 fad5 	bl	8000a08 <usart_send_string>
		 *packet_buffer = 0;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
		 for(uint8_t i=0;i< len;i++)
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
 8000468:	e006      	b.n	8000478 <bootloader_handle_getChipID_cmd+0x78>
		 {
			bl_reply_buff[i] = 0; //array itself is a pointer
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	4a0c      	ldr	r2, [pc, #48]	; (80004a0 <bootloader_handle_getChipID_cmd+0xa0>)
 800046e:	2100      	movs	r1, #0
 8000470:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i< len;i++)
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	3301      	adds	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <bootloader_handle_getChipID_cmd+0x9c>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	7bfa      	ldrb	r2, [r7, #15]
 800047e:	429a      	cmp	r2, r3
 8000480:	d3f3      	bcc.n	800046a <bootloader_handle_getChipID_cmd+0x6a>
		 }
	 }
}
 8000482:	bf00      	nop
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000008 	.word	0x20000008
 8000490:	08001bdc 	.word	0x08001bdc
 8000494:	08001c74 	.word	0x08001c74
 8000498:	08001ca4 	.word	0x08001ca4
 800049c:	20000004 	.word	0x20000004
 80004a0:	2000012c 	.word	0x2000012c
 80004a4:	08001c28 	.word	0x08001c28

080004a8 <get_bl_version>:


uint8_t get_bl_version()
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 80004ac:	2310      	movs	r3, #16
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
	...

080004b8 <get_bl_commands_into_reply_buff>:

void get_bl_commands_into_reply_buff()
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
    uint8_t cmd_ary_len = (sizeof(cmd_code_array)/sizeof(cmd_code_array[0]));
 80004be:	230a      	movs	r3, #10
 80004c0:	71bb      	strb	r3, [r7, #6]
    for(uint8_t i = 0; i< cmd_ary_len; i++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	71fb      	strb	r3, [r7, #7]
 80004c6:	e008      	b.n	80004da <get_bl_commands_into_reply_buff+0x22>
    {
    	bl_reply_buff[i] = cmd_code_array[i];
 80004c8:	79fa      	ldrb	r2, [r7, #7]
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	4908      	ldr	r1, [pc, #32]	; (80004f0 <get_bl_commands_into_reply_buff+0x38>)
 80004ce:	5c89      	ldrb	r1, [r1, r2]
 80004d0:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <get_bl_commands_into_reply_buff+0x3c>)
 80004d2:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i< cmd_ary_len; i++)
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	3301      	adds	r3, #1
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	79fa      	ldrb	r2, [r7, #7]
 80004dc:	79bb      	ldrb	r3, [r7, #6]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d3f2      	bcc.n	80004c8 <get_bl_commands_into_reply_buff+0x10>
    }
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000010 	.word	0x20000010
 80004f4:	2000012c 	.word	0x2000012c

080004f8 <get_bl_chip_id_into_reply_buff>:

void get_bl_chip_id_into_reply_buff()
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
	for(int8_t i = 24,j = 0; i>=0 && j<4; i-=8,j++)
 80004fe:	2318      	movs	r3, #24
 8000500:	71fb      	strb	r3, [r7, #7]
 8000502:	2300      	movs	r3, #0
 8000504:	71bb      	strb	r3, [r7, #6]
 8000506:	e013      	b.n	8000530 <get_bl_chip_id_into_reply_buff+0x38>
	{
		bl_reply_buff[j] = (MCU_Chip_ID_byte1 >> i) & 0xFF;
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <get_bl_chip_id_into_reply_buff+0xdc>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000510:	40da      	lsrs	r2, r3
 8000512:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000516:	b2d1      	uxtb	r1, r2
 8000518:	4a2f      	ldr	r2, [pc, #188]	; (80005d8 <get_bl_chip_id_into_reply_buff+0xe0>)
 800051a:	54d1      	strb	r1, [r2, r3]
	for(int8_t i = 24,j = 0; i>=0 && j<4; i-=8,j++)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	3b08      	subs	r3, #8
 8000520:	b2db      	uxtb	r3, r3
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	3301      	adds	r3, #1
 800052c:	b2db      	uxtb	r3, r3
 800052e:	71bb      	strb	r3, [r7, #6]
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db03      	blt.n	8000540 <get_bl_chip_id_into_reply_buff+0x48>
 8000538:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800053c:	2b03      	cmp	r3, #3
 800053e:	dde3      	ble.n	8000508 <get_bl_chip_id_into_reply_buff+0x10>
	}
	for(int8_t i = 24,j = 0; i>=0 && j<8; i-=8,j++)
 8000540:	2318      	movs	r3, #24
 8000542:	717b      	strb	r3, [r7, #5]
 8000544:	2300      	movs	r3, #0
 8000546:	713b      	strb	r3, [r7, #4]
 8000548:	e014      	b.n	8000574 <get_bl_chip_id_into_reply_buff+0x7c>
	{
		bl_reply_buff[j+4] = (MCU_Chip_ID_byte2 >> i) & 0xFF;
 800054a:	4b24      	ldr	r3, [pc, #144]	; (80005dc <get_bl_chip_id_into_reply_buff+0xe4>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000552:	40da      	lsrs	r2, r3
 8000554:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000558:	3304      	adds	r3, #4
 800055a:	b2d1      	uxtb	r1, r2
 800055c:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <get_bl_chip_id_into_reply_buff+0xe0>)
 800055e:	54d1      	strb	r1, [r2, r3]
	for(int8_t i = 24,j = 0; i>=0 && j<8; i-=8,j++)
 8000560:	797b      	ldrb	r3, [r7, #5]
 8000562:	3b08      	subs	r3, #8
 8000564:	b2db      	uxtb	r3, r3
 8000566:	717b      	strb	r3, [r7, #5]
 8000568:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	3301      	adds	r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	713b      	strb	r3, [r7, #4]
 8000574:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000578:	2b00      	cmp	r3, #0
 800057a:	db03      	blt.n	8000584 <get_bl_chip_id_into_reply_buff+0x8c>
 800057c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000580:	2b07      	cmp	r3, #7
 8000582:	dde2      	ble.n	800054a <get_bl_chip_id_into_reply_buff+0x52>
	}
	for(int8_t i = 24,j = 0; i>=0 && j<12; i-=8,j++)
 8000584:	2318      	movs	r3, #24
 8000586:	70fb      	strb	r3, [r7, #3]
 8000588:	2300      	movs	r3, #0
 800058a:	70bb      	strb	r3, [r7, #2]
 800058c:	e014      	b.n	80005b8 <get_bl_chip_id_into_reply_buff+0xc0>
	{
		bl_reply_buff[j+8] = (MCU_Chip_ID_byte3 >> i) & 0xFF;
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <get_bl_chip_id_into_reply_buff+0xe8>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000596:	40da      	lsrs	r2, r3
 8000598:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800059c:	3308      	adds	r3, #8
 800059e:	b2d1      	uxtb	r1, r2
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <get_bl_chip_id_into_reply_buff+0xe0>)
 80005a2:	54d1      	strb	r1, [r2, r3]
	for(int8_t i = 24,j = 0; i>=0 && j<12; i-=8,j++)
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	3b08      	subs	r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	70fb      	strb	r3, [r7, #3]
 80005ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	3301      	adds	r3, #1
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	70bb      	strb	r3, [r7, #2]
 80005b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db03      	blt.n	80005c8 <get_bl_chip_id_into_reply_buff+0xd0>
 80005c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80005c4:	2b0b      	cmp	r3, #11
 80005c6:	dde2      	ble.n	800058e <get_bl_chip_id_into_reply_buff+0x96>
	}
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	1fff7a10 	.word	0x1fff7a10
 80005d8:	2000012c 	.word	0x2000012c
 80005dc:	1fff7a14 	.word	0x1fff7a14
 80005e0:	1fff7a18 	.word	0x1fff7a18

080005e4 <build_bl_packets>:
#include "serailize_packets.h"
#include "bootloader.h"

//bl_packet_struct packet;
void build_bl_packets(uint8_t cmd)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	bl_packet_struct packet = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	809a      	strh	r2, [r3, #4]
	switch(cmd)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b33      	cmp	r3, #51	; 0x33
 80005fc:	d048      	beq.n	8000690 <build_bl_packets+0xac>
 80005fe:	2b33      	cmp	r3, #51	; 0x33
 8000600:	dc67      	bgt.n	80006d2 <build_bl_packets+0xee>
 8000602:	2b31      	cmp	r3, #49	; 0x31
 8000604:	d002      	beq.n	800060c <build_bl_packets+0x28>
 8000606:	2b32      	cmp	r3, #50	; 0x32
 8000608:	d021      	beq.n	800064e <build_bl_packets+0x6a>

		}


     }
}
 800060a:	e062      	b.n	80006d2 <build_bl_packets+0xee>
        	packet.length_to_follow = 0x5;
 800060c:	2305      	movs	r3, #5
 800060e:	733b      	strb	r3, [r7, #12]
        	packet.cmd_code         = BL_GET_VER;
 8000610:	2351      	movs	r3, #81	; 0x51
 8000612:	737b      	strb	r3, [r7, #13]
        	uint32_t crc_value      = crc_calculation_hw(&packet.cmd_code, 1);
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	3301      	adds	r3, #1
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f8f3 	bl	8000808 <crc_calculation_hw>
 8000622:	6178      	str	r0, [r7, #20]
            packet.crc[0]           = (uint8_t) (crc_value & 0xFF);
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	73bb      	strb	r3, [r7, #14]
        	packet.crc[1]           = (uint8_t) ((crc_value >> 8)  & 0xFF);
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	b2db      	uxtb	r3, r3
 8000630:	73fb      	strb	r3, [r7, #15]
        	packet.crc[2]           = (uint8_t) ((crc_value >> 16) & 0xFF);
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	0c1b      	lsrs	r3, r3, #16
 8000636:	b2db      	uxtb	r3, r3
 8000638:	743b      	strb	r3, [r7, #16]
        	packet.crc[3]           = (uint8_t) ((crc_value >> 24) & 0xFF);
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	0e1b      	lsrs	r3, r3, #24
 800063e:	b2db      	uxtb	r3, r3
 8000640:	747b      	strb	r3, [r7, #17]
            serialize_packet(&packet);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f936 	bl	80008b8 <serialize_packet>
    	    break;
 800064c:	e041      	b.n	80006d2 <build_bl_packets+0xee>
			packet.length_to_follow = 0x5;
 800064e:	2305      	movs	r3, #5
 8000650:	733b      	strb	r3, [r7, #12]
			packet.cmd_code         = BL_GET_HELP;
 8000652:	2352      	movs	r3, #82	; 0x52
 8000654:	737b      	strb	r3, [r7, #13]
			uint32_t crc_value      = crc_calculation_hw(&packet.cmd_code, 1);
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	3301      	adds	r3, #1
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f8d2 	bl	8000808 <crc_calculation_hw>
 8000664:	61b8      	str	r0, [r7, #24]
			packet.crc[0]           = (uint8_t) (crc_value & 0xFF);
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	73bb      	strb	r3, [r7, #14]
			packet.crc[1]           = (uint8_t) ((crc_value >> 8)  & 0xFF);
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b2db      	uxtb	r3, r3
 8000672:	73fb      	strb	r3, [r7, #15]
			packet.crc[2]           = (uint8_t) ((crc_value >> 16) & 0xFF);
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	0c1b      	lsrs	r3, r3, #16
 8000678:	b2db      	uxtb	r3, r3
 800067a:	743b      	strb	r3, [r7, #16]
			packet.crc[3]           = (uint8_t) ((crc_value >> 24) & 0xFF);
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	0e1b      	lsrs	r3, r3, #24
 8000680:	b2db      	uxtb	r3, r3
 8000682:	747b      	strb	r3, [r7, #17]
			serialize_packet(&packet);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f915 	bl	80008b8 <serialize_packet>
			break;
 800068e:	e020      	b.n	80006d2 <build_bl_packets+0xee>
			packet.length_to_follow = 0x5;
 8000690:	2305      	movs	r3, #5
 8000692:	733b      	strb	r3, [r7, #12]
			packet.cmd_code         = BL_GET_CID;
 8000694:	2353      	movs	r3, #83	; 0x53
 8000696:	737b      	strb	r3, [r7, #13]
			uint32_t crc_value      = crc_calculation_hw(&packet.cmd_code, 1);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	3301      	adds	r3, #1
 800069e:	2101      	movs	r1, #1
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f8b1 	bl	8000808 <crc_calculation_hw>
 80006a6:	61f8      	str	r0, [r7, #28]
			packet.crc[0]           = (uint8_t) (crc_value & 0xFF);
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	73bb      	strb	r3, [r7, #14]
			packet.crc[1]           = (uint8_t) ((crc_value >> 8)  & 0xFF);
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
			packet.crc[2]           = (uint8_t) ((crc_value >> 16) & 0xFF);
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	0c1b      	lsrs	r3, r3, #16
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	743b      	strb	r3, [r7, #16]
			packet.crc[3]           = (uint8_t) ((crc_value >> 24) & 0xFF);
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	0e1b      	lsrs	r3, r3, #24
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	747b      	strb	r3, [r7, #17]
			serialize_packet(&packet);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f8f4 	bl	80008b8 <serialize_packet>
			break;
 80006d0:	bf00      	nop
}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <bl_crc_verify>:
 */

#include "bl_crc_verification.h"

uint8_t bl_crc_verify(volatile uint8_t* packet_Buffer)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
    uint8_t total_len = 1 + packet_Buffer[0];
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	3301      	adds	r3, #1
 80006ea:	75fb      	strb	r3, [r7, #23]
    uint32_t CRC_Received = (packet_Buffer[total_len - 4]) |
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	3b04      	subs	r3, #4
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4619      	mov	r1, r3
                            (packet_Buffer[total_len - 3] << 8) |
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	021b      	lsls	r3, r3, #8
    uint32_t CRC_Received = (packet_Buffer[total_len - 4]) |
 8000708:	ea41 0203 	orr.w	r2, r1, r3
                            (packet_Buffer[total_len - 2] << 16) |
 800070c:	7dfb      	ldrb	r3, [r7, #23]
 800070e:	3b02      	subs	r3, #2
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	440b      	add	r3, r1
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	041b      	lsls	r3, r3, #16
                            (packet_Buffer[total_len - 3] << 8) |
 800071a:	431a      	orrs	r2, r3
                            (packet_Buffer[total_len - 1] << 24);
 800071c:	7dfb      	ldrb	r3, [r7, #23]
 800071e:	3b01      	subs	r3, #1
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	440b      	add	r3, r1
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	061b      	lsls	r3, r3, #24
                            (packet_Buffer[total_len - 2] << 16) |
 800072a:	4313      	orrs	r3, r2
    uint32_t CRC_Received = (packet_Buffer[total_len - 4]) |
 800072c:	613b      	str	r3, [r7, #16]


	uint32_t crc_input_len = packet_Buffer[0] - 4;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	3b04      	subs	r3, #4
 8000736:	60fb      	str	r3, [r7, #12]

	uint32_t crc_computed = crc_calculation_hw(&packet_Buffer[1], crc_input_len);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3301      	adds	r3, #1
 800073c:	68f9      	ldr	r1, [r7, #12]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f862 	bl	8000808 <crc_calculation_hw>
 8000744:	60b8      	str	r0, [r7, #8]

	if(crc_computed == CRC_Received)
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	429a      	cmp	r2, r3
 800074c:	d101      	bne.n	8000752 <bl_crc_verify+0x78>
	{
		return 1;
 800074e:	2301      	movs	r3, #1
 8000750:	e000      	b.n	8000754 <bl_crc_verify+0x7a>
	}
	else
	{
		return 0;
 8000752:	2300      	movs	r3, #0
	}
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <bootloader_response>:

#include "bl_response.h"

USART_RegDef_Struct* pusartTwo = USART2;
void bootloader_response(volatile uint8_t* reply_buffer, uint8_t len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
	usart_send_bytes(pusartTwo, (uint8_t*)reply_buffer, len);
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <bootloader_response+0x24>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	78fa      	ldrb	r2, [r7, #3]
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f956 	bl	8000a22 <usart_send_bytes>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000000c 	.word	0x2000000c

08000784 <bootloader_uart_read_data>:
							  BL_MEM_WRITE,
							  BL_ENDIS_RW_PROTECT,
							  BL_MEM_READ,BL_OTP_READ};

void bootloader_uart_read_data()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

     uint8_t recieve_len = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	71fb      	strb	r3, [r7, #7]

     switch(tx_packet_buffer[1])
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <bootloader_uart_read_data+0x44>)
 8000790:	785b      	ldrb	r3, [r3, #1]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b53      	cmp	r3, #83	; 0x53
 8000796:	d00e      	beq.n	80007b6 <bootloader_uart_read_data+0x32>
 8000798:	2b53      	cmp	r3, #83	; 0x53
 800079a:	dc10      	bgt.n	80007be <bootloader_uart_read_data+0x3a>
 800079c:	2b51      	cmp	r3, #81	; 0x51
 800079e:	d002      	beq.n	80007a6 <bootloader_uart_read_data+0x22>
 80007a0:	2b52      	cmp	r3, #82	; 0x52
 80007a2:	d004      	beq.n	80007ae <bootloader_uart_read_data+0x2a>
		   bootloader_handle_getChipID_cmd(tx_packet_buffer);
		   break;
		 }
     }

}
 80007a4:	e00b      	b.n	80007be <bootloader_uart_read_data+0x3a>
           bootloader_handle_getVersion_cmd(tx_packet_buffer);
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <bootloader_uart_read_data+0x44>)
 80007a8:	f7ff fd7e 	bl	80002a8 <bootloader_handle_getVersion_cmd>
    	   break;
 80007ac:	e007      	b.n	80007be <bootloader_uart_read_data+0x3a>
		   bootloader_handle_getHelp_cmd(tx_packet_buffer);
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <bootloader_uart_read_data+0x44>)
 80007b0:	f7ff fdd2 	bl	8000358 <bootloader_handle_getHelp_cmd>
		   break;
 80007b4:	e003      	b.n	80007be <bootloader_uart_read_data+0x3a>
		   bootloader_handle_getChipID_cmd(tx_packet_buffer);
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <bootloader_uart_read_data+0x44>)
 80007b8:	f7ff fe22 	bl	8000400 <bootloader_handle_getChipID_cmd>
		   break;
 80007bc:	bf00      	nop
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000140 	.word	0x20000140

080007cc <bootloader_jump_to_user_app>:


void bootloader_jump_to_user_app()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0

	/*Function pointer to store the address of the reset handler of the user application.*/
	void (*app_reset_handler) (void);

	/*1.Configure MSP by reading base address of the Sector2 of flash memory which is the starting address of the user app*/
	uint32_t msp_value = (*(volatile uint32_t*)FLASH_SECTOR2_BASEADDR);
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <bootloader_jump_to_user_app+0x30>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	60fb      	str	r3, [r7, #12]

	//__disable_irq();
	/*2.Set the MSP value by putting base address of the sector2 of flash memory,which is the starting address of the user app*/
    __set_msp(msp_value);
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f000 fbeb 	bl	8000fb4 <__set_msp>

    SCB_VTOR = FLASH_SECTOR2_BASEADDR;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <bootloader_jump_to_user_app+0x34>)
 80007e0:	4a06      	ldr	r2, [pc, #24]	; (80007fc <bootloader_jump_to_user_app+0x30>)
 80007e2:	601a      	str	r2, [r3, #0]

    /*3.Fetch the reset handler address of the user application,which is base address of sector2 of flash m/y + 0x4;*/
    uint32_t app_reset_handler_address = (*(volatile uint32_t*)(FLASH_SECTOR2_BASEADDR + 0x4));
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <bootloader_jump_to_user_app+0x38>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60bb      	str	r3, [r7, #8]
    app_reset_handler = (void (*) (void)) (app_reset_handler_address);
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	607b      	str	r3, [r7, #4]

    /*4. Jump to reset handler of the user application */
    app_reset_handler();
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4798      	blx	r3
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08008000 	.word	0x08008000
 8000800:	e000ed08 	.word	0xe000ed08
 8000804:	08008004 	.word	0x08008004

08000808 <crc_calculation_hw>:

#include "crc_calculation.h"


uint32_t crc_calculation_hw(uint8_t* data, uint32_t len)
{
 8000808:	b480      	push	{r7}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
	CRC_CLK_EN();
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <crc_calculation_hw+0xa8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <crc_calculation_hw+0xa8>)
 8000818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
	CRC->CRC_CR = 1;
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <crc_calculation_hw+0xac>)
 8000820:	2201      	movs	r2, #1
 8000822:	609a      	str	r2, [r3, #8]

	while(len >= 4)
 8000824:	e01b      	b.n	800085e <crc_calculation_hw+0x56>
	{
		uint32_t word = ((data[0]) | (data[1]<<8) | (data[2]<<16) | (data[3]<<24));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	431a      	orrs	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3302      	adds	r3, #2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	041b      	lsls	r3, r3, #16
 800083e:	431a      	orrs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3303      	adds	r3, #3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	061b      	lsls	r3, r3, #24
 8000848:	4313      	orrs	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
		CRC->CRC_DR = word;
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <crc_calculation_hw+0xac>)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6013      	str	r3, [r2, #0]
		data += 4;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3304      	adds	r3, #4
 8000856:	607b      	str	r3, [r7, #4]
		len  -= 4;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	3b04      	subs	r3, #4
 800085c:	603b      	str	r3, [r7, #0]
	while(len >= 4)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	2b03      	cmp	r3, #3
 8000862:	d8e0      	bhi.n	8000826 <crc_calculation_hw+0x1e>
	}

	if(len > 0)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d01b      	beq.n	80008a2 <crc_calculation_hw+0x9a>
	{
		uint32_t word = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
		for(uint32_t i=0; i< len ;i++)
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	e00f      	b.n	8000894 <crc_calculation_hw+0x8c>
		{
			word |= (data[i] << (8*i));
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	461a      	mov	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	4313      	orrs	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
		for(uint32_t i=0; i< len ;i++)
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	3301      	adds	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d3eb      	bcc.n	8000874 <crc_calculation_hw+0x6c>
		}
		CRC->CRC_DR = word;
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <crc_calculation_hw+0xac>)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	6013      	str	r3, [r2, #0]
	}

	return CRC->CRC_DR;
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <crc_calculation_hw+0xac>)
 80008a4:	681b      	ldr	r3, [r3, #0]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40023000 	.word	0x40023000

080008b8 <serialize_packet>:
volatile uint8_t tx_packet_buffer[6] = {0};
volatile uint32_t  tx_index  = 0 ;
volatile uint32_t  tx_length = 0;
USART_RegDef_Struct* pUsartt = USART2;
void serialize_packet(bl_packet_struct* packet)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	tx_packet_buffer[0] = packet->length_to_follow;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <serialize_packet+0x54>)
 80008c6:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[1] = packet->cmd_code;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	785a      	ldrb	r2, [r3, #1]
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <serialize_packet+0x54>)
 80008ce:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[2] = packet->crc[0];
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	789a      	ldrb	r2, [r3, #2]
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <serialize_packet+0x54>)
 80008d6:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[3] = packet->crc[1];
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	78da      	ldrb	r2, [r3, #3]
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <serialize_packet+0x54>)
 80008de:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[4] = packet->crc[2];
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	791a      	ldrb	r2, [r3, #4]
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <serialize_packet+0x54>)
 80008e6:	711a      	strb	r2, [r3, #4]
	tx_packet_buffer[5] = packet->crc[3];
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	795a      	ldrb	r2, [r3, #5]
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <serialize_packet+0x54>)
 80008ee:	715a      	strb	r2, [r3, #5]

	tx_index  = 0;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <serialize_packet+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
	tx_length = 1 + packet->length_to_follow;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <serialize_packet+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
	/*pUsartt->USART_CR1 &= ~(1U<<7);//Clearing TXEIE)
	if (pUsartt->USART_SR & (1U << 7))  // TXE is set
	{
	    pUsartt->USART_CR1 |= (1U << 7);  // Enable TXE interrupt
	}*/
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000140 	.word	0x20000140
 8000910:	20000148 	.word	0x20000148
 8000914:	2000014c 	.word	0x2000014c

08000918 <gpio_user_cfg_init>:
const uint8_t gpio_spi_array_size = sizeof(gpio_spi_cfg)/sizeof(gpio_spi_cfg[0]);
const uint8_t gpio_i2c_array_size = sizeof(gpio_i2c_cfg)/sizeof(gpio_i2c_cfg[0]);

/*API to handle GPIO user configurations */
void gpio_user_cfg_init()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0 ; i < gpio_uart_array_size; i++)
 800091e:	2300      	movs	r3, #0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	e009      	b.n	8000938 <gpio_user_cfg_init+0x20>
	{
		gpio_init(&gpio_uart_cfg[i]);
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <gpio_user_cfg_init+0x7c>)
 800092a:	4413      	add	r3, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f839 	bl	80009a4 <gpio_init>
	for(uint8_t i = 0 ; i < gpio_uart_array_size; i++)
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	3301      	adds	r3, #1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	2202      	movs	r2, #2
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4293      	cmp	r3, r2
 800093e:	d3f1      	bcc.n	8000924 <gpio_user_cfg_init+0xc>
	}

	for(uint8_t i = 0 ; i < gpio_spi_array_size; i++)
 8000940:	2300      	movs	r3, #0
 8000942:	71bb      	strb	r3, [r7, #6]
 8000944:	e009      	b.n	800095a <gpio_user_cfg_init+0x42>
	{
		gpio_init(&gpio_spi_cfg[i]);
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	4a13      	ldr	r2, [pc, #76]	; (8000998 <gpio_user_cfg_init+0x80>)
 800094c:	4413      	add	r3, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f828 	bl	80009a4 <gpio_init>
	for(uint8_t i = 0 ; i < gpio_spi_array_size; i++)
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	3301      	adds	r3, #1
 8000958:	71bb      	strb	r3, [r7, #6]
 800095a:	2204      	movs	r2, #4
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	4293      	cmp	r3, r2
 8000960:	d3f1      	bcc.n	8000946 <gpio_user_cfg_init+0x2e>
	}
	for(uint8_t i =0; i < gpio_i2c_array_size; i++)
 8000962:	2300      	movs	r3, #0
 8000964:	717b      	strb	r3, [r7, #5]
 8000966:	e009      	b.n	800097c <gpio_user_cfg_init+0x64>
	{
		gpio_init(&gpio_i2c_cfg[i]);
 8000968:	797b      	ldrb	r3, [r7, #5]
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <gpio_user_cfg_init+0x84>)
 800096e:	4413      	add	r3, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f817 	bl	80009a4 <gpio_init>
	for(uint8_t i =0; i < gpio_i2c_array_size; i++)
 8000976:	797b      	ldrb	r3, [r7, #5]
 8000978:	3301      	adds	r3, #1
 800097a:	717b      	strb	r3, [r7, #5]
 800097c:	2202      	movs	r2, #2
 800097e:	797b      	ldrb	r3, [r7, #5]
 8000980:	4293      	cmp	r3, r2
 8000982:	d3f1      	bcc.n	8000968 <gpio_user_cfg_init+0x50>
	}

	gpio_init(gpio_button_user_cfg);
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <gpio_user_cfg_init+0x88>)
 8000986:	f000 f80d 	bl	80009a4 <gpio_init>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000001c 	.word	0x2000001c
 8000998:	2000003c 	.word	0x2000003c
 800099c:	2000007c 	.word	0x2000007c
 80009a0:	2000009c 	.word	0x2000009c

080009a4 <gpio_init>:

/* API to initialize GPIO with user configurations */
void gpio_init(GPIO_Hanlde_Struct* pGpio_cfg)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	gpio_stm32_init(pGpio_cfg);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f849 	bl	8000a44 <gpio_stm32_init>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <gpio_pin_read>:

uint8_t gpio_pin_read(GPIO_RegDef_Struct* pGpioButton, uint8_t GPIO_PIN5)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b084      	sub	sp, #16
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	70fb      	strb	r3, [r7, #3]
	uint8_t pin_status = gpio_stm32_pin_read(pGpioButton, GPIO_PIN5);
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	4619      	mov	r1, r3
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f8fc 	bl	8000bc8 <gpio_stm32_pin_read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]

	return pin_status;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <usart_init>:
#include "uart.h"
#include "uart_stm32.h"

/* UART abstraction layer api's implementation */
void usart_init()
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
	usart_stm32_init();
 80009e2:	f000 f967 	bl	8000cb4 <usart_stm32_init>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}

080009ea <usart_send_char>:

void usart_send_char(USART_RegDef_Struct* pUSART,char ch)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	70fb      	strb	r3, [r7, #3]
	usart_stm32_send_char(pUSART, ch);
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	4619      	mov	r1, r3
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 fa04 	bl	8000e08 <usart_stm32_send_char>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <usart_send_string>:

void usart_send_string(USART_RegDef_Struct* pUsart,char* pStr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	usart_stm32_send_string(pUsart, pStr);
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 fa14 	bl	8000e42 <usart_stm32_send_string>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <usart_send_bytes>:
void usart_send_hex(USART_RegDef_Struct* pUSARTx, uint32_t hex_value)
{
	usart_stm32_send_hex(pUSARTx, hex_value);
}
void usart_send_bytes(USART_RegDef_Struct* pUSARTT, uint8_t* data, uint8_t len)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71fb      	strb	r3, [r7, #7]
	usart_stm32_send_bytes(pUSARTT, data, len);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f000 fa1a 	bl	8000e70 <usart_stm32_send_bytes>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <gpio_stm32_init>:

#include "gpio_stm32.h"

/* API for initializing GPIOA peripheral for enabling USART2 based communication - MCAL */
void gpio_stm32_init(GPIO_Hanlde_Struct* pGpio_cfg)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

	GPIOA_CLK_EN();
 8000a4c:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <gpio_stm32_init+0x180>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a5c      	ldr	r2, [pc, #368]	; (8000bc4 <gpio_stm32_init+0x180>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB_CLK_EN();
 8000a58:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <gpio_stm32_init+0x180>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a59      	ldr	r2, [pc, #356]	; (8000bc4 <gpio_stm32_init+0x180>)
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30


	/*MODER Configuration */
	pGpio_cfg->gpio_reg_def->MODER   &= ~(3U << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	6819      	ldr	r1, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	791b      	ldrb	r3, [r3, #4]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	2203      	movs	r2, #3
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	400a      	ands	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
	pGpio_cfg->gpio_reg_def->MODER   |=  (pGpio_cfg->gpio_cfg.gpio_pin_mode << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	795b      	ldrb	r3, [r3, #5]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	4619      	mov	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	601a      	str	r2, [r3, #0]

	/*OTYPE Configuration */
	pGpio_cfg->gpio_reg_def->OTYPER  &= ~(1 << (pGpio_cfg->gpio_cfg.gpio_pin));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	791b      	ldrb	r3, [r3, #4]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2301      	movs	r3, #1
 8000aae:	408b      	lsls	r3, r1
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	400a      	ands	r2, r1
 8000aba:	605a      	str	r2, [r3, #4]
	pGpio_cfg->gpio_reg_def->OTYPER  |=  (pGpio_cfg->gpio_cfg.gpio_pin_otype << pGpio_cfg->gpio_cfg.gpio_pin);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7a1b      	ldrb	r3, [r3, #8]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	791b      	ldrb	r3, [r3, #4]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	605a      	str	r2, [r3, #4]

	/*OSPEEDR Configuration */
	pGpio_cfg->gpio_reg_def->OSPEEDR &= ~(3U << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	6899      	ldr	r1, [r3, #8]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43da      	mvns	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	400a      	ands	r2, r1
 8000af4:	609a      	str	r2, [r3, #8]
	pGpio_cfg->gpio_reg_def->OSPEEDR |= (pGpio_cfg->gpio_cfg.gpio_pin_speed << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7a5b      	ldrb	r3, [r3, #9]
 8000b00:	4619      	mov	r1, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	430a      	orrs	r2, r1
 8000b14:	609a      	str	r2, [r3, #8]

	/*PUPDR Configurations */
	pGpio_cfg->gpio_reg_def->PUPDR   &= ~(3U << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	68d9      	ldr	r1, [r3, #12]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	791b      	ldrb	r3, [r3, #4]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43da      	mvns	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	400a      	ands	r2, r1
 8000b30:	60da      	str	r2, [r3, #12]
	pGpio_cfg->gpio_reg_def->PUPDR   |=  (pGpio_cfg->gpio_cfg.gpio_pin_pupd << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	79db      	ldrb	r3, [r3, #7]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	791b      	ldrb	r3, [r3, #4]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	60da      	str	r2, [r3, #12]

	/*AFR Configurations */
    uint8_t AFR_index           =  pGpio_cfg->gpio_cfg.gpio_pin / 8;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	791b      	ldrb	r3, [r3, #4]
 8000b56:	08db      	lsrs	r3, r3, #3
 8000b58:	73fb      	strb	r3, [r7, #15]
    pGpio_cfg->gpio_reg_def->AFR[AFR_index] &= ~(0xF << ((pGpio_cfg->gpio_cfg.gpio_pin%8)*4));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	3208      	adds	r2, #8
 8000b62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	791b      	ldrb	r3, [r3, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	220f      	movs	r2, #15
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	7bfa      	ldrb	r2, [r7, #15]
 8000b80:	4001      	ands	r1, r0
 8000b82:	3208      	adds	r2, #8
 8000b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pGpio_cfg->gpio_reg_def->AFR[AFR_index] |= (pGpio_cfg->gpio_cfg.gpio_alt_func << ((pGpio_cfg->gpio_cfg.gpio_pin%8)*4));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	3208      	adds	r2, #8
 8000b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	799b      	ldrb	r3, [r3, #6]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	7bfa      	ldrb	r2, [r7, #15]
 8000bb0:	4301      	orrs	r1, r0
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* UART initialization call - MCAL */
    usart_init();
 8000bb8:	f7ff ff11 	bl	80009de <usart_init>
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <gpio_stm32_pin_read>:

uint8_t gpio_stm32_pin_read(GPIO_RegDef_Struct* pgpioButton, uint8_t pin_num)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
        if(pgpioButton->IDR & (1 << pin_num))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	78fa      	ldrb	r2, [r7, #3]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	4013      	ands	r3, r2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <gpio_stm32_pin_read+0x22>
        	return 0;//pin is configured as PULL-UP,so state will be 1 always until the button is pressed.
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <gpio_stm32_pin_read+0x24>
        else
        	return 1;//Pull down config is risky,as if by any chnace 5v is connected to the pin via the switch it may damage the MCU.
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <get_pclk_value>:
uint16_t ahbp_array[8]  = {2,4,8,16,64,128,256,512};
uint8_t apb1p_array[4] = {2,4,8,16};

/*API to fetch and calculate peripheral clock speed*/
uint32_t get_pclk_value(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
	uint32_t pclk,system_clock;
	uint8_t clksrc,temp_ahb,ahbp,temp_apb1,apb1p;
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <get_pclk_value+0x9c>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000c0c:	7a7b      	ldrb	r3, [r7, #9]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <get_pclk_value+0x20>
	{
		system_clock = 16000000;
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <get_pclk_value+0xa0>)
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	e00a      	b.n	8000c2e <get_pclk_value+0x36>
	}
	else if(clksrc == 1)
 8000c18:	7a7b      	ldrb	r3, [r7, #9]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d102      	bne.n	8000c24 <get_pclk_value+0x2c>
	{
		system_clock = 8000000; //why?
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <get_pclk_value+0xa4>)
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	e004      	b.n	8000c2e <get_pclk_value+0x36>
	}
	else if(clksrc == 2)
 8000c24:	7a7b      	ldrb	r3, [r7, #9]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d101      	bne.n	8000c2e <get_pclk_value+0x36>
	{
		RCC_GetPLL_Output_Clk();
 8000c2a:	f000 f83d 	bl	8000ca8 <RCC_GetPLL_Output_Clk>
	}

    /*AHB pre-scalar*/
	temp_ahb = ((RCC->CFGR >> 4) & 0xF);
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <get_pclk_value+0x9c>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	091b      	lsrs	r3, r3, #4
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	723b      	strb	r3, [r7, #8]
	if(temp_ahb < 8)
 8000c3c:	7a3b      	ldrb	r3, [r7, #8]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d802      	bhi.n	8000c48 <get_pclk_value+0x50>
	{
		ahbp = 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	72fb      	strb	r3, [r7, #11]
 8000c46:	e005      	b.n	8000c54 <get_pclk_value+0x5c>
	}
	else
	{
		ahbp = ahbp_array[temp_ahb-8];
 8000c48:	7a3b      	ldrb	r3, [r7, #8]
 8000c4a:	3b08      	subs	r3, #8
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <get_pclk_value+0xa8>)
 8000c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c52:	72fb      	strb	r3, [r7, #11]
	}

	/*APB1 Pre-Scalar */
	temp_apb1 = ((RCC->CFGR >> 10) & 0x7);
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <get_pclk_value+0x9c>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	0a9b      	lsrs	r3, r3, #10
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	71fb      	strb	r3, [r7, #7]
	if(temp_apb1 < 4)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d802      	bhi.n	8000c6e <get_pclk_value+0x76>
	{
		apb1p = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	72bb      	strb	r3, [r7, #10]
 8000c6c:	e004      	b.n	8000c78 <get_pclk_value+0x80>
	}
	else
	{
		apb1p = apb1p_array[temp_apb1-4];
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	3b04      	subs	r3, #4
 8000c72:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <get_pclk_value+0xac>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	72bb      	strb	r3, [r7, #10]
	}

	pclk = ((system_clock/ahbp))/apb1p;
 8000c78:	7afb      	ldrb	r3, [r7, #11]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c80:	7abb      	ldrb	r3, [r7, #10]
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	603b      	str	r3, [r7, #0]
	return pclk;
 8000c88:	683b      	ldr	r3, [r7, #0]

}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	00f42400 	.word	0x00f42400
 8000c9c:	007a1200 	.word	0x007a1200
 8000ca0:	200000ac 	.word	0x200000ac
 8000ca4:	200000bc 	.word	0x200000bc

08000ca8 <RCC_GetPLL_Output_Clk>:

void RCC_GetPLL_Output_Clk(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	//ToDo
	return;
 8000cac:	bf00      	nop
}
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <usart_stm32_init>:
volatile uint8_t command_recieved = 0;


/* API to handle the stm32 usart2 initialization - MCAL */
void usart_stm32_init()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	    USART2_CLK_EN();
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <usart_stm32_init+0x88>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <usart_stm32_init+0x88>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40

		enable_usart2_irq();//To Enable USART2 interrupt in NVIC_ISER1
 8000cc6:	f000 f927 	bl	8000f18 <enable_usart2_irq>

		USART_RegDef_Struct* pUsart = USART2;
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <usart_stm32_init+0x8c>)
 8000ccc:	607b      	str	r3, [r7, #4]

		/*Setting up CR1 register */

		pUsart->USART_CR1 &= ~(1U<<13);//clearing UE bit in CR1
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60da      	str	r2, [r3, #12]
		usart_set_baudrate(pUsart);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f832 	bl	8000d44 <usart_set_baudrate>


		pUsart->USART_CR1 &= ~(1U<<2);//clearing RE bit in CR1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	f023 0204 	bic.w	r2, r3, #4
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	60da      	str	r2, [r3, #12]
		pUsart->USART_CR1 |=  (1U<<2);//setting up RE bit in CR1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	f043 0204 	orr.w	r2, r3, #4
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	60da      	str	r2, [r3, #12]

		pUsart->USART_CR1 &= ~(1U<<3);//clearing TE bit in CR1
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	f023 0208 	bic.w	r2, r3, #8
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60da      	str	r2, [r3, #12]
		pUsart->USART_CR1 |=  (1U<<3);//setting up TE bit in CR1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	f043 0208 	orr.w	r2, r3, #8
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	60da      	str	r2, [r3, #12]

		pUsart->USART_CR1 &= ~(1U<<5);//clearing RXNEIE
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	f023 0220 	bic.w	r2, r3, #32
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
		pUsart->USART_CR1 |=  (1U<<5);//setting RXNEIE bit in CR1
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	f043 0220 	orr.w	r2, r3, #32
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]


		pUsart->USART_CR1 |=  (1U<<13);//setting up UE bit in CR1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	60da      	str	r2, [r3, #12]

}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40004400 	.word	0x40004400

08000d44 <usart_set_baudrate>:

/*API to set the baud rate register for USART2 */
void usart_set_baudrate(USART_RegDef_Struct* pUsart2)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	uint32_t pclkx,usart_div,M_Part,F_Part;
	uint32_t temp_reg = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

	/*API call to fetch peripheral clock value*/
	pclkx = get_pclk_value();
 8000d50:	f7ff ff52 	bl	8000bf8 <get_pclk_value>
 8000d54:	6138      	str	r0, [r7, #16]

	if(pUsart2->USART_CR1 & (1<<15))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00b      	beq.n	8000d7a <usart_set_baudrate+0x36>
	{
		usart_div = (25 * pclkx)/ (2 * 9600);  //floating point math is expensive in embedded systems,so multiplied by 100.
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	009a      	lsls	r2, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a24      	ldr	r2, [pc, #144]	; (8000e00 <usart_set_baudrate+0xbc>)
 8000d70:	fba2 2303 	umull	r2, r3, r2, r3
 8000d74:	0adb      	lsrs	r3, r3, #11
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	e00a      	b.n	8000d90 <usart_set_baudrate+0x4c>
	}
	else
	{
		usart_div = (25 * pclkx)/ (4 * 9600); //floating point math is expensive in embedded systems,so multiplied by 100.
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	009a      	lsls	r2, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <usart_set_baudrate+0xbc>)
 8000d88:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8c:	0b1b      	lsrs	r3, r3, #12
 8000d8e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate mantissa part */
	M_Part = usart_div/100;
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <usart_set_baudrate+0xc0>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	095b      	lsrs	r3, r3, #5
 8000d9a:	60fb      	str	r3, [r7, #12]

	temp_reg |= M_Part << 4;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	617b      	str	r3, [r7, #20]

	/* Calculate fractional part */
	F_Part = usart_div - (M_Part * 100);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2264      	movs	r2, #100	; 0x64
 8000daa:	fb02 f303 	mul.w	r3, r2, r3
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	61bb      	str	r3, [r7, #24]

	/* Calculate the final fractional part */
	if(pUsart2->USART_CR1 & (1<< 15))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00a      	beq.n	8000dd6 <usart_set_baudrate+0x92>
	{
		F_Part = (((F_Part * 8) + 50)/100) & (0x7);//adding 50 to get the correct nearest value
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	3332      	adds	r3, #50	; 0x32
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <usart_set_baudrate+0xc0>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	095b      	lsrs	r3, r3, #5
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	e009      	b.n	8000dea <usart_set_baudrate+0xa6>
	}
	else
	{
		F_Part = (((F_Part * 16) + 50)/100) & (0x0F);//adding 50 to get the correct nearest value
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	3332      	adds	r3, #50	; 0x32
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <usart_set_baudrate+0xc0>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	61bb      	str	r3, [r7, #24]
	}
    temp_reg |= F_Part;
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	617b      	str	r3, [r7, #20]

    /* set USART BRR register */
    pUsart2->USART_BRR = temp_reg;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	609a      	str	r2, [r3, #8]
}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	1b4e81b5 	.word	0x1b4e81b5
 8000e04:	51eb851f 	.word	0x51eb851f

08000e08 <usart_stm32_send_char>:


/*API to handle transmission of a character*/
void usart_stm32_send_char(USART_RegDef_Struct* pUSART,char ch)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
	/* wait until TXE flag is set */
	while(!(pUSART->USART_SR & (1 << 7)));
 8000e14:	bf00      	nop
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f9      	beq.n	8000e16 <usart_stm32_send_char+0xe>
	pUSART->USART_DR = ch;
 8000e22:	78fa      	ldrb	r2, [r7, #3]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	605a      	str	r2, [r3, #4]
	/* wait until whole transmission completes */
	while(!(pUSART->USART_SR & (1 << 6)));
 8000e28:	bf00      	nop
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f9      	beq.n	8000e2a <usart_stm32_send_char+0x22>
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <usart_stm32_send_string>:

/*API to handle transmission of a string*/
void usart_stm32_send_string(USART_RegDef_Struct* pUsart,char* pStr)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
	while(*pStr)
 8000e4c:	e007      	b.n	8000e5e <usart_stm32_send_string+0x1c>
	{
		//usart_send_char(pUsart,*(pStr++));
		usart_stm32_send_char(pUsart,*(pStr++));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	603a      	str	r2, [r7, #0]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4619      	mov	r1, r3
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ffd5 	bl	8000e08 <usart_stm32_send_char>
	while(*pStr)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f3      	bne.n	8000e4e <usart_stm32_send_string+0xc>
	}
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <usart_stm32_send_bytes>:
		usart_send_char(pUSARTx, hex_char);
	}
}

void usart_stm32_send_bytes(USART_RegDef_Struct* pUSARTT,uint8_t* data, uint8_t len)
{
 8000e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e74:	b089      	sub	sp, #36	; 0x24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	466b      	mov	r3, sp
 8000e82:	461e      	mov	r6, r3
	char buff[len];
 8000e84:	79f9      	ldrb	r1, [r7, #7]
 8000e86:	460b      	mov	r3, r1
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	b2cb      	uxtb	r3, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4698      	mov	r8, r3
 8000e92:	4691      	mov	r9, r2
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ea0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ea4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ea8:	b2cb      	uxtb	r3, r1
 8000eaa:	2200      	movs	r2, #0
 8000eac:	461c      	mov	r4, r3
 8000eae:	4615      	mov	r5, r2
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	00eb      	lsls	r3, r5, #3
 8000eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ebe:	00e2      	lsls	r2, r4, #3
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	ebad 0d03 	sub.w	sp, sp, r3
 8000ecc:	466b      	mov	r3, sp
 8000ece:	3300      	adds	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
	for(uint8_t j = 0; j < len ; j++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	77fb      	strb	r3, [r7, #31]
 8000ed6:	e013      	b.n	8000f00 <usart_stm32_send_bytes+0x90>
    {
    	sprintf(buff, "%02X", data[j]);
 8000ed8:	7ffb      	ldrb	r3, [r7, #31]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	490c      	ldr	r1, [pc, #48]	; (8000f14 <usart_stm32_send_bytes+0xa4>)
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f000 f9d3 	bl	8001290 <siprintf>
    	usart_stm32_send_string(pUSARTT, buff);
 8000eea:	6979      	ldr	r1, [r7, #20]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff ffa8 	bl	8000e42 <usart_stm32_send_string>
    	usart_send_char(pUSARTT, ' ');
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff fd78 	bl	80009ea <usart_send_char>
	for(uint8_t j = 0; j < len ; j++)
 8000efa:	7ffb      	ldrb	r3, [r7, #31]
 8000efc:	3301      	adds	r3, #1
 8000efe:	77fb      	strb	r3, [r7, #31]
 8000f00:	7ffa      	ldrb	r2, [r7, #31]
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d3e7      	bcc.n	8000ed8 <usart_stm32_send_bytes+0x68>
 8000f08:	46b5      	mov	sp, r6
    }
}
 8000f0a:	bf00      	nop
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f14:	08001cb4 	.word	0x08001cb4

08000f18 <enable_usart2_irq>:

/*API to enable USART2 interrupt*/
void enable_usart2_irq(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
    NVIC_ISER1 = (1 << (38-32)); //Enable USART2 interrupt (Irq 38)
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <enable_usart2_irq+0x14>)
 8000f1e:	2240      	movs	r2, #64	; 0x40
 8000f20:	601a      	str	r2, [r3, #0]
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e104 	.word	0xe000e104

08000f30 <USART2_IRQHandler>:

/*USART2 IRQ handler*/
void USART2_IRQHandler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
    USART_RegDef_Struct* pusart2 = USART2;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <USART2_IRQHandler+0x6c>)
 8000f38:	607b      	str	r3, [r7, #4]


    if(pusart2->USART_SR & (1 << 7))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d010      	beq.n	8000f68 <USART2_IRQHandler+0x38>
    {
    	if(tx_index < tx_length)
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <USART2_IRQHandler+0x70>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <USART2_IRQHandler+0x74>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d20a      	bcs.n	8000f68 <USART2_IRQHandler+0x38>
    	{
    	   pusart2->USART_DR = tx_packet_buffer[tx_index++];
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <USART2_IRQHandler+0x70>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	4911      	ldr	r1, [pc, #68]	; (8000fa0 <USART2_IRQHandler+0x70>)
 8000f5a:	600a      	str	r2, [r1, #0]
 8000f5c:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <USART2_IRQHandler+0x78>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	605a      	str	r2, [r3, #4]
    	}
    }
	if(pusart2->USART_SR & (1 << 5))//Wait until RXE flag is set
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00e      	beq.n	8000f92 <USART2_IRQHandler+0x62>
	{
		uint8_t recived = pusart2->USART_DR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	70fb      	strb	r3, [r7, #3]
		if(recived >=32 && recived <=126)
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	2b1f      	cmp	r3, #31
 8000f7e:	d908      	bls.n	8000f92 <USART2_IRQHandler+0x62>
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b7e      	cmp	r3, #126	; 0x7e
 8000f84:	d805      	bhi.n	8000f92 <USART2_IRQHandler+0x62>
		{
			//usart_send_char(pusart2, recived);
			usart_command = recived;
 8000f86:	4a09      	ldr	r2, [pc, #36]	; (8000fac <USART2_IRQHandler+0x7c>)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	7013      	strb	r3, [r2, #0]
			command_recieved = 1;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <USART2_IRQHandler+0x80>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	20000148 	.word	0x20000148
 8000fa4:	2000014c 	.word	0x2000014c
 8000fa8:	20000140 	.word	0x20000140
 8000fac:	20000150 	.word	0x20000150
 8000fb0:	20000151 	.word	0x20000151

08000fb4 <__set_msp>:
 */

#include "inline.h"

void __set_msp(uint32_t top_of_stack)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	__asm volatile(
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f383 8808 	msr	MSP, r3
			"msr msp, %0\n"
			:
			: "r"(top_of_stack)
			:
			);
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <main>:
void sw_delay()
{
	for(volatile uint8_t i =0; i<500;i++);
}
int main(void)
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
	extern volatile uint8_t usart_command;
	extern volatile uint8_t command_recieved;
	char string_array[] = "Hi,From BootLoader!!!";
 8000fd2:	4b68      	ldr	r3, [pc, #416]	; (8001174 <main+0x1a8>)
 8000fd4:	463c      	mov	r4, r7
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fe0:	6020      	str	r0, [r4, #0]
 8000fe2:	3404      	adds	r4, #4
 8000fe4:	8021      	strh	r1, [r4, #0]
	char bl_continue_flag = '0';
 8000fe6:	2330      	movs	r3, #48	; 0x30
 8000fe8:	77fb      	strb	r3, [r7, #31]

	gpio_user_cfg_init();
 8000fea:	f7ff fc95 	bl	8000918 <gpio_user_cfg_init>
	usart_init();
 8000fee:	f7ff fcf6 	bl	80009de <usart_init>

	USART_RegDef_Struct* pUsart = USART2;
 8000ff2:	4b61      	ldr	r3, [pc, #388]	; (8001178 <main+0x1ac>)
 8000ff4:	61bb      	str	r3, [r7, #24]
    if(gpio_pin_read(GPIOB,GPIO_PIN_5))
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	4860      	ldr	r0, [pc, #384]	; (800117c <main+0x1b0>)
 8000ffa:	f7ff fcde 	bl	80009ba <gpio_pin_read>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80ac 	beq.w	800115e <main+0x192>

       do
       {

    	   //bl_continue_flag = '0';
		   usart_send_string(pUsart, "*=============================================================*\n\r");
 8001006:	495e      	ldr	r1, [pc, #376]	; (8001180 <main+0x1b4>)
 8001008:	69b8      	ldr	r0, [r7, #24]
 800100a:	f7ff fcfd 	bl	8000a08 <usart_send_string>
		   usart_send_string(pUsart, "|                           MENU                              |\n\r");
 800100e:	495d      	ldr	r1, [pc, #372]	; (8001184 <main+0x1b8>)
 8001010:	69b8      	ldr	r0, [r7, #24]
 8001012:	f7ff fcf9 	bl	8000a08 <usart_send_string>
		   usart_send_string(pUsart, "|                 STM32F407 DISC BOOTLOADER V1                |\n\r");
 8001016:	495c      	ldr	r1, [pc, #368]	; (8001188 <main+0x1bc>)
 8001018:	69b8      	ldr	r0, [r7, #24]
 800101a:	f7ff fcf5 	bl	8000a08 <usart_send_string>
		   usart_send_string(pUsart, "*=============================================================*\n\r\n\r");
 800101e:	495b      	ldr	r1, [pc, #364]	; (800118c <main+0x1c0>)
 8001020:	69b8      	ldr	r0, [r7, #24]
 8001022:	f7ff fcf1 	bl	8000a08 <usart_send_string>
		   usart_send_string(pUsart, "   Which BL command you want to send ?\n\r\n\r");
 8001026:	495a      	ldr	r1, [pc, #360]	; (8001190 <main+0x1c4>)
 8001028:	69b8      	ldr	r0, [r7, #24]
 800102a:	f7ff fced 	bl	8000a08 <usart_send_string>
		   usart_send_string(pUsart, "   BL_GET_VER                                              --> 1\n\r");
 800102e:	4959      	ldr	r1, [pc, #356]	; (8001194 <main+0x1c8>)
 8001030:	69b8      	ldr	r0, [r7, #24]
 8001032:	f7ff fce9 	bl	8000a08 <usart_send_string>
		   usart_send_string(pUsart, "   BL_GET_HELP                                             --> 2\n\r");
 8001036:	4958      	ldr	r1, [pc, #352]	; (8001198 <main+0x1cc>)
 8001038:	69b8      	ldr	r0, [r7, #24]
 800103a:	f7ff fce5 	bl	8000a08 <usart_send_string>
		   usart_send_string(pUsart, "   EXIT_MENU                                               --> 0\n\r\n\r");
 800103e:	4957      	ldr	r1, [pc, #348]	; (800119c <main+0x1d0>)
 8001040:	69b8      	ldr	r0, [r7, #24]
 8001042:	f7ff fce1 	bl	8000a08 <usart_send_string>
		   usart_send_string(pUsart, "   Enter The Command Code:");
 8001046:	4956      	ldr	r1, [pc, #344]	; (80011a0 <main+0x1d4>)
 8001048:	69b8      	ldr	r0, [r7, #24]
 800104a:	f7ff fcdd 	bl	8000a08 <usart_send_string>


		   while(!command_recieved);
 800104e:	bf00      	nop
 8001050:	4b54      	ldr	r3, [pc, #336]	; (80011a4 <main+0x1d8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0fa      	beq.n	8001050 <main+0x84>

		   command_recieved = 0;
 800105a:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <main+0x1d8>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		   usart_send_char(pUsart, usart_command);
 8001060:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <main+0x1dc>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4619      	mov	r1, r3
 8001068:	69b8      	ldr	r0, [r7, #24]
 800106a:	f7ff fcbe 	bl	80009ea <usart_send_char>
		  // extern volatile uint8_t tx_packet_buffer[6] = {0};//this should be initialized to zero
		   usart_send_string(pUsart, "\n\r\n\r");
 800106e:	494f      	ldr	r1, [pc, #316]	; (80011ac <main+0x1e0>)
 8001070:	69b8      	ldr	r0, [r7, #24]
 8001072:	f7ff fcc9 	bl	8000a08 <usart_send_string>
		   switch(usart_command)
 8001076:	4b4c      	ldr	r3, [pc, #304]	; (80011a8 <main+0x1dc>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b33      	cmp	r3, #51	; 0x33
 800107e:	d020      	beq.n	80010c2 <main+0xf6>
 8001080:	2b33      	cmp	r3, #51	; 0x33
 8001082:	dc2b      	bgt.n	80010dc <main+0x110>
 8001084:	2b31      	cmp	r3, #49	; 0x31
 8001086:	d002      	beq.n	800108e <main+0xc2>
 8001088:	2b32      	cmp	r3, #50	; 0x32
 800108a:	d00d      	beq.n	80010a8 <main+0xdc>
 800108c:	e026      	b.n	80010dc <main+0x110>
		   {
			  case '1':
				   usart_send_string(pUsart, "Command Requested : 0x51(BL_GET_VER) \n\r");
 800108e:	4948      	ldr	r1, [pc, #288]	; (80011b0 <main+0x1e4>)
 8001090:	69b8      	ldr	r0, [r7, #24]
 8001092:	f7ff fcb9 	bl	8000a08 <usart_send_string>
				   build_bl_packets(usart_command);
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <main+0x1dc>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff faa1 	bl	80005e4 <build_bl_packets>
				   bootloader_uart_read_data();
 80010a2:	f7ff fb6f 	bl	8000784 <bootloader_uart_read_data>
				   break;
 80010a6:	e01e      	b.n	80010e6 <main+0x11a>
			  case '2':
				   usart_send_string(pUsart, "Command Requested : 0x52(BL_GET_HELP) \n\r");
 80010a8:	4942      	ldr	r1, [pc, #264]	; (80011b4 <main+0x1e8>)
 80010aa:	69b8      	ldr	r0, [r7, #24]
 80010ac:	f7ff fcac 	bl	8000a08 <usart_send_string>
				   build_bl_packets(usart_command);
 80010b0:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <main+0x1dc>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa94 	bl	80005e4 <build_bl_packets>
				   bootloader_uart_read_data();
 80010bc:	f7ff fb62 	bl	8000784 <bootloader_uart_read_data>
				   break;
 80010c0:	e011      	b.n	80010e6 <main+0x11a>
			  case '3':
				   usart_send_string(pUsart, "Command Requested : 0x53(BL_GET_CID) \n\r");
 80010c2:	493d      	ldr	r1, [pc, #244]	; (80011b8 <main+0x1ec>)
 80010c4:	69b8      	ldr	r0, [r7, #24]
 80010c6:	f7ff fc9f 	bl	8000a08 <usart_send_string>
				   build_bl_packets(usart_command);
 80010ca:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <main+0x1dc>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa87 	bl	80005e4 <build_bl_packets>
				   bootloader_uart_read_data();
 80010d6:	f7ff fb55 	bl	8000784 <bootloader_uart_read_data>
				   break;
 80010da:	e004      	b.n	80010e6 <main+0x11a>

			  default:
				   usart_send_string(pUsart, "Invalid command\n\r");
 80010dc:	4937      	ldr	r1, [pc, #220]	; (80011bc <main+0x1f0>)
 80010de:	69b8      	ldr	r0, [r7, #24]
 80010e0:	f7ff fc92 	bl	8000a08 <usart_send_string>
				   break;
 80010e4:	bf00      	nop
		   }

		   usart_send_string(pUsart, "Continue in BootLoader(y/n):");
 80010e6:	4936      	ldr	r1, [pc, #216]	; (80011c0 <main+0x1f4>)
 80010e8:	69b8      	ldr	r0, [r7, #24]
 80010ea:	f7ff fc8d 	bl	8000a08 <usart_send_string>

		   while(!command_recieved);
 80010ee:	bf00      	nop
 80010f0:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <main+0x1d8>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0fa      	beq.n	80010f0 <main+0x124>
		   command_recieved = 0;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <main+0x1d8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
		   usart_send_char(pUsart, usart_command);
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <main+0x1dc>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	69b8      	ldr	r0, [r7, #24]
 800110a:	f7ff fc6e 	bl	80009ea <usart_send_char>
		   usart_send_string(pUsart, "\n\r\n\r");
 800110e:	4927      	ldr	r1, [pc, #156]	; (80011ac <main+0x1e0>)
 8001110:	69b8      	ldr	r0, [r7, #24]
 8001112:	f7ff fc79 	bl	8000a08 <usart_send_string>
		   switch(usart_command)
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <main+0x1dc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b6e      	cmp	r3, #110	; 0x6e
 800111e:	d002      	beq.n	8001126 <main+0x15a>
 8001120:	2b79      	cmp	r3, #121	; 0x79
 8001122:	d007      	beq.n	8001134 <main+0x168>
 8001124:	e00e      	b.n	8001144 <main+0x178>
		   {
		       case 'n':
		   		  {
		   			 usart_send_string(pUsart, "Entering User application");
 8001126:	4927      	ldr	r1, [pc, #156]	; (80011c4 <main+0x1f8>)
 8001128:	69b8      	ldr	r0, [r7, #24]
 800112a:	f7ff fc6d 	bl	8000a08 <usart_send_string>
		   			 bootloader_jump_to_user_app();
 800112e:	f7ff fb4d 	bl	80007cc <bootloader_jump_to_user_app>
		   			 break;
 8001132:	e00f      	b.n	8001154 <main+0x188>
		   		  }
		       case	'y':
		       {
		    	     usart_send_string(pUsart, "You have entered 'y',Continuing in BootLoader Mode!!!\r\n\r\n");
 8001134:	4924      	ldr	r1, [pc, #144]	; (80011c8 <main+0x1fc>)
 8001136:	69b8      	ldr	r0, [r7, #24]
 8001138:	f7ff fc66 	bl	8000a08 <usart_send_string>
		    	     bl_continue_flag = usart_command;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <main+0x1dc>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	77fb      	strb	r3, [r7, #31]
		    	     break;
 8001142:	e007      	b.n	8001154 <main+0x188>
		       }
		       default:
		       {
		    	    usart_send_string(pUsart, "You have entered invalid command,Continuing in BootLoader Mode!!!\r\n\r\n");
 8001144:	4921      	ldr	r1, [pc, #132]	; (80011cc <main+0x200>)
 8001146:	69b8      	ldr	r0, [r7, #24]
 8001148:	f7ff fc5e 	bl	8000a08 <usart_send_string>
		    	   	bl_continue_flag = usart_command;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <main+0x1dc>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	77fb      	strb	r3, [r7, #31]
		    	   	break;
 8001152:	bf00      	nop
		       }
		   }


       }
	   while(bl_continue_flag);
 8001154:	7ffb      	ldrb	r3, [r7, #31]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f47f af55 	bne.w	8001006 <main+0x3a>
 800115c:	e005      	b.n	800116a <main+0x19e>


    }
    else
    {
    	usart_send_string(pUsart, "Entering User application");
 800115e:	4919      	ldr	r1, [pc, #100]	; (80011c4 <main+0x1f8>)
 8001160:	69b8      	ldr	r0, [r7, #24]
 8001162:	f7ff fc51 	bl	8000a08 <usart_send_string>
    	bootloader_jump_to_user_app();
 8001166:	f7ff fb31 	bl	80007cc <bootloader_jump_to_user_app>
 800116a:	2300      	movs	r3, #0
    }

}
 800116c:	4618      	mov	r0, r3
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bdb0      	pop	{r4, r5, r7, pc}
 8001174:	0800203c 	.word	0x0800203c
 8001178:	40004400 	.word	0x40004400
 800117c:	40020400 	.word	0x40020400
 8001180:	08001cbc 	.word	0x08001cbc
 8001184:	08001d00 	.word	0x08001d00
 8001188:	08001d44 	.word	0x08001d44
 800118c:	08001d88 	.word	0x08001d88
 8001190:	08001dcc 	.word	0x08001dcc
 8001194:	08001df8 	.word	0x08001df8
 8001198:	08001e3c 	.word	0x08001e3c
 800119c:	08001e80 	.word	0x08001e80
 80011a0:	08001ec8 	.word	0x08001ec8
 80011a4:	20000151 	.word	0x20000151
 80011a8:	20000150 	.word	0x20000150
 80011ac:	08001ee4 	.word	0x08001ee4
 80011b0:	08001eec 	.word	0x08001eec
 80011b4:	08001f14 	.word	0x08001f14
 80011b8:	08001f40 	.word	0x08001f40
 80011bc:	08001f68 	.word	0x08001f68
 80011c0:	08001f7c 	.word	0x08001f7c
 80011c4:	08001f9c 	.word	0x08001f9c
 80011c8:	08001fb8 	.word	0x08001fb8
 80011cc:	08001ff4 	.word	0x08001ff4

080011d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <_sbrk+0x5c>)
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <_sbrk+0x60>)
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <_sbrk+0x64>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <_sbrk+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001200:	f000 f866 	bl	80012d0 <__errno>
 8001204:	4603      	mov	r3, r0
 8001206:	220c      	movs	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	e009      	b.n	8001224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <_sbrk+0x64>)
 8001220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20020000 	.word	0x20020000
 8001230:	00000400 	.word	0x00000400
 8001234:	20000154 	.word	0x20000154
 8001238:	200002a0 	.word	0x200002a0

0800123c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001240:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800126a:	f000 f837 	bl	80012dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126e:	f7ff fead 	bl	8000fcc <main>

08001272 <LoopForever>:

LoopForever:
  b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   r0, =_estack
 8001274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001280:	08002090 	.word	0x08002090
  ldr r2, =_sbss
 8001284:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001288:	200002a0 	.word	0x200002a0

0800128c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC_IRQHandler>
	...

08001290 <siprintf>:
 8001290:	b40e      	push	{r1, r2, r3}
 8001292:	b500      	push	{lr}
 8001294:	b09c      	sub	sp, #112	; 0x70
 8001296:	ab1d      	add	r3, sp, #116	; 0x74
 8001298:	9002      	str	r0, [sp, #8]
 800129a:	9006      	str	r0, [sp, #24]
 800129c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <siprintf+0x38>)
 80012a2:	9107      	str	r1, [sp, #28]
 80012a4:	9104      	str	r1, [sp, #16]
 80012a6:	4909      	ldr	r1, [pc, #36]	; (80012cc <siprintf+0x3c>)
 80012a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80012ac:	9105      	str	r1, [sp, #20]
 80012ae:	6800      	ldr	r0, [r0, #0]
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	a902      	add	r1, sp, #8
 80012b4:	f000 f988 	bl	80015c8 <_svfiprintf_r>
 80012b8:	9b02      	ldr	r3, [sp, #8]
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	b01c      	add	sp, #112	; 0x70
 80012c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80012c4:	b003      	add	sp, #12
 80012c6:	4770      	bx	lr
 80012c8:	2000010c 	.word	0x2000010c
 80012cc:	ffff0208 	.word	0xffff0208

080012d0 <__errno>:
 80012d0:	4b01      	ldr	r3, [pc, #4]	; (80012d8 <__errno+0x8>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	2000010c 	.word	0x2000010c

080012dc <__libc_init_array>:
 80012dc:	b570      	push	{r4, r5, r6, lr}
 80012de:	4d0d      	ldr	r5, [pc, #52]	; (8001314 <__libc_init_array+0x38>)
 80012e0:	4c0d      	ldr	r4, [pc, #52]	; (8001318 <__libc_init_array+0x3c>)
 80012e2:	1b64      	subs	r4, r4, r5
 80012e4:	10a4      	asrs	r4, r4, #2
 80012e6:	2600      	movs	r6, #0
 80012e8:	42a6      	cmp	r6, r4
 80012ea:	d109      	bne.n	8001300 <__libc_init_array+0x24>
 80012ec:	4d0b      	ldr	r5, [pc, #44]	; (800131c <__libc_init_array+0x40>)
 80012ee:	4c0c      	ldr	r4, [pc, #48]	; (8001320 <__libc_init_array+0x44>)
 80012f0:	f000 fc68 	bl	8001bc4 <_init>
 80012f4:	1b64      	subs	r4, r4, r5
 80012f6:	10a4      	asrs	r4, r4, #2
 80012f8:	2600      	movs	r6, #0
 80012fa:	42a6      	cmp	r6, r4
 80012fc:	d105      	bne.n	800130a <__libc_init_array+0x2e>
 80012fe:	bd70      	pop	{r4, r5, r6, pc}
 8001300:	f855 3b04 	ldr.w	r3, [r5], #4
 8001304:	4798      	blx	r3
 8001306:	3601      	adds	r6, #1
 8001308:	e7ee      	b.n	80012e8 <__libc_init_array+0xc>
 800130a:	f855 3b04 	ldr.w	r3, [r5], #4
 800130e:	4798      	blx	r3
 8001310:	3601      	adds	r6, #1
 8001312:	e7f2      	b.n	80012fa <__libc_init_array+0x1e>
 8001314:	08002088 	.word	0x08002088
 8001318:	08002088 	.word	0x08002088
 800131c:	08002088 	.word	0x08002088
 8001320:	0800208c 	.word	0x0800208c

08001324 <__retarget_lock_acquire_recursive>:
 8001324:	4770      	bx	lr

08001326 <__retarget_lock_release_recursive>:
 8001326:	4770      	bx	lr

08001328 <_free_r>:
 8001328:	b538      	push	{r3, r4, r5, lr}
 800132a:	4605      	mov	r5, r0
 800132c:	2900      	cmp	r1, #0
 800132e:	d041      	beq.n	80013b4 <_free_r+0x8c>
 8001330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001334:	1f0c      	subs	r4, r1, #4
 8001336:	2b00      	cmp	r3, #0
 8001338:	bfb8      	it	lt
 800133a:	18e4      	addlt	r4, r4, r3
 800133c:	f000 f8de 	bl	80014fc <__malloc_lock>
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <_free_r+0x90>)
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	b933      	cbnz	r3, 8001354 <_free_r+0x2c>
 8001346:	6063      	str	r3, [r4, #4]
 8001348:	6014      	str	r4, [r2, #0]
 800134a:	4628      	mov	r0, r5
 800134c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001350:	f000 b8da 	b.w	8001508 <__malloc_unlock>
 8001354:	42a3      	cmp	r3, r4
 8001356:	d908      	bls.n	800136a <_free_r+0x42>
 8001358:	6820      	ldr	r0, [r4, #0]
 800135a:	1821      	adds	r1, r4, r0
 800135c:	428b      	cmp	r3, r1
 800135e:	bf01      	itttt	eq
 8001360:	6819      	ldreq	r1, [r3, #0]
 8001362:	685b      	ldreq	r3, [r3, #4]
 8001364:	1809      	addeq	r1, r1, r0
 8001366:	6021      	streq	r1, [r4, #0]
 8001368:	e7ed      	b.n	8001346 <_free_r+0x1e>
 800136a:	461a      	mov	r2, r3
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	b10b      	cbz	r3, 8001374 <_free_r+0x4c>
 8001370:	42a3      	cmp	r3, r4
 8001372:	d9fa      	bls.n	800136a <_free_r+0x42>
 8001374:	6811      	ldr	r1, [r2, #0]
 8001376:	1850      	adds	r0, r2, r1
 8001378:	42a0      	cmp	r0, r4
 800137a:	d10b      	bne.n	8001394 <_free_r+0x6c>
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	4401      	add	r1, r0
 8001380:	1850      	adds	r0, r2, r1
 8001382:	4283      	cmp	r3, r0
 8001384:	6011      	str	r1, [r2, #0]
 8001386:	d1e0      	bne.n	800134a <_free_r+0x22>
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	6053      	str	r3, [r2, #4]
 800138e:	4408      	add	r0, r1
 8001390:	6010      	str	r0, [r2, #0]
 8001392:	e7da      	b.n	800134a <_free_r+0x22>
 8001394:	d902      	bls.n	800139c <_free_r+0x74>
 8001396:	230c      	movs	r3, #12
 8001398:	602b      	str	r3, [r5, #0]
 800139a:	e7d6      	b.n	800134a <_free_r+0x22>
 800139c:	6820      	ldr	r0, [r4, #0]
 800139e:	1821      	adds	r1, r4, r0
 80013a0:	428b      	cmp	r3, r1
 80013a2:	bf04      	itt	eq
 80013a4:	6819      	ldreq	r1, [r3, #0]
 80013a6:	685b      	ldreq	r3, [r3, #4]
 80013a8:	6063      	str	r3, [r4, #4]
 80013aa:	bf04      	itt	eq
 80013ac:	1809      	addeq	r1, r1, r0
 80013ae:	6021      	streq	r1, [r4, #0]
 80013b0:	6054      	str	r4, [r2, #4]
 80013b2:	e7ca      	b.n	800134a <_free_r+0x22>
 80013b4:	bd38      	pop	{r3, r4, r5, pc}
 80013b6:	bf00      	nop
 80013b8:	20000298 	.word	0x20000298

080013bc <sbrk_aligned>:
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	4e0e      	ldr	r6, [pc, #56]	; (80013f8 <sbrk_aligned+0x3c>)
 80013c0:	460c      	mov	r4, r1
 80013c2:	6831      	ldr	r1, [r6, #0]
 80013c4:	4605      	mov	r5, r0
 80013c6:	b911      	cbnz	r1, 80013ce <sbrk_aligned+0x12>
 80013c8:	f000 fba6 	bl	8001b18 <_sbrk_r>
 80013cc:	6030      	str	r0, [r6, #0]
 80013ce:	4621      	mov	r1, r4
 80013d0:	4628      	mov	r0, r5
 80013d2:	f000 fba1 	bl	8001b18 <_sbrk_r>
 80013d6:	1c43      	adds	r3, r0, #1
 80013d8:	d00a      	beq.n	80013f0 <sbrk_aligned+0x34>
 80013da:	1cc4      	adds	r4, r0, #3
 80013dc:	f024 0403 	bic.w	r4, r4, #3
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	d007      	beq.n	80013f4 <sbrk_aligned+0x38>
 80013e4:	1a21      	subs	r1, r4, r0
 80013e6:	4628      	mov	r0, r5
 80013e8:	f000 fb96 	bl	8001b18 <_sbrk_r>
 80013ec:	3001      	adds	r0, #1
 80013ee:	d101      	bne.n	80013f4 <sbrk_aligned+0x38>
 80013f0:	f04f 34ff 	mov.w	r4, #4294967295
 80013f4:	4620      	mov	r0, r4
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
 80013f8:	2000029c 	.word	0x2000029c

080013fc <_malloc_r>:
 80013fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001400:	1ccd      	adds	r5, r1, #3
 8001402:	f025 0503 	bic.w	r5, r5, #3
 8001406:	3508      	adds	r5, #8
 8001408:	2d0c      	cmp	r5, #12
 800140a:	bf38      	it	cc
 800140c:	250c      	movcc	r5, #12
 800140e:	2d00      	cmp	r5, #0
 8001410:	4607      	mov	r7, r0
 8001412:	db01      	blt.n	8001418 <_malloc_r+0x1c>
 8001414:	42a9      	cmp	r1, r5
 8001416:	d905      	bls.n	8001424 <_malloc_r+0x28>
 8001418:	230c      	movs	r3, #12
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	2600      	movs	r6, #0
 800141e:	4630      	mov	r0, r6
 8001420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80014f8 <_malloc_r+0xfc>
 8001428:	f000 f868 	bl	80014fc <__malloc_lock>
 800142c:	f8d8 3000 	ldr.w	r3, [r8]
 8001430:	461c      	mov	r4, r3
 8001432:	bb5c      	cbnz	r4, 800148c <_malloc_r+0x90>
 8001434:	4629      	mov	r1, r5
 8001436:	4638      	mov	r0, r7
 8001438:	f7ff ffc0 	bl	80013bc <sbrk_aligned>
 800143c:	1c43      	adds	r3, r0, #1
 800143e:	4604      	mov	r4, r0
 8001440:	d155      	bne.n	80014ee <_malloc_r+0xf2>
 8001442:	f8d8 4000 	ldr.w	r4, [r8]
 8001446:	4626      	mov	r6, r4
 8001448:	2e00      	cmp	r6, #0
 800144a:	d145      	bne.n	80014d8 <_malloc_r+0xdc>
 800144c:	2c00      	cmp	r4, #0
 800144e:	d048      	beq.n	80014e2 <_malloc_r+0xe6>
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	4631      	mov	r1, r6
 8001454:	4638      	mov	r0, r7
 8001456:	eb04 0903 	add.w	r9, r4, r3
 800145a:	f000 fb5d 	bl	8001b18 <_sbrk_r>
 800145e:	4581      	cmp	r9, r0
 8001460:	d13f      	bne.n	80014e2 <_malloc_r+0xe6>
 8001462:	6821      	ldr	r1, [r4, #0]
 8001464:	1a6d      	subs	r5, r5, r1
 8001466:	4629      	mov	r1, r5
 8001468:	4638      	mov	r0, r7
 800146a:	f7ff ffa7 	bl	80013bc <sbrk_aligned>
 800146e:	3001      	adds	r0, #1
 8001470:	d037      	beq.n	80014e2 <_malloc_r+0xe6>
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	442b      	add	r3, r5
 8001476:	6023      	str	r3, [r4, #0]
 8001478:	f8d8 3000 	ldr.w	r3, [r8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d038      	beq.n	80014f2 <_malloc_r+0xf6>
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	42a2      	cmp	r2, r4
 8001484:	d12b      	bne.n	80014de <_malloc_r+0xe2>
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e00f      	b.n	80014ac <_malloc_r+0xb0>
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	1b52      	subs	r2, r2, r5
 8001490:	d41f      	bmi.n	80014d2 <_malloc_r+0xd6>
 8001492:	2a0b      	cmp	r2, #11
 8001494:	d917      	bls.n	80014c6 <_malloc_r+0xca>
 8001496:	1961      	adds	r1, r4, r5
 8001498:	42a3      	cmp	r3, r4
 800149a:	6025      	str	r5, [r4, #0]
 800149c:	bf18      	it	ne
 800149e:	6059      	strne	r1, [r3, #4]
 80014a0:	6863      	ldr	r3, [r4, #4]
 80014a2:	bf08      	it	eq
 80014a4:	f8c8 1000 	streq.w	r1, [r8]
 80014a8:	5162      	str	r2, [r4, r5]
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	4638      	mov	r0, r7
 80014ae:	f104 060b 	add.w	r6, r4, #11
 80014b2:	f000 f829 	bl	8001508 <__malloc_unlock>
 80014b6:	f026 0607 	bic.w	r6, r6, #7
 80014ba:	1d23      	adds	r3, r4, #4
 80014bc:	1af2      	subs	r2, r6, r3
 80014be:	d0ae      	beq.n	800141e <_malloc_r+0x22>
 80014c0:	1b9b      	subs	r3, r3, r6
 80014c2:	50a3      	str	r3, [r4, r2]
 80014c4:	e7ab      	b.n	800141e <_malloc_r+0x22>
 80014c6:	42a3      	cmp	r3, r4
 80014c8:	6862      	ldr	r2, [r4, #4]
 80014ca:	d1dd      	bne.n	8001488 <_malloc_r+0x8c>
 80014cc:	f8c8 2000 	str.w	r2, [r8]
 80014d0:	e7ec      	b.n	80014ac <_malloc_r+0xb0>
 80014d2:	4623      	mov	r3, r4
 80014d4:	6864      	ldr	r4, [r4, #4]
 80014d6:	e7ac      	b.n	8001432 <_malloc_r+0x36>
 80014d8:	4634      	mov	r4, r6
 80014da:	6876      	ldr	r6, [r6, #4]
 80014dc:	e7b4      	b.n	8001448 <_malloc_r+0x4c>
 80014de:	4613      	mov	r3, r2
 80014e0:	e7cc      	b.n	800147c <_malloc_r+0x80>
 80014e2:	230c      	movs	r3, #12
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4638      	mov	r0, r7
 80014e8:	f000 f80e 	bl	8001508 <__malloc_unlock>
 80014ec:	e797      	b.n	800141e <_malloc_r+0x22>
 80014ee:	6025      	str	r5, [r4, #0]
 80014f0:	e7dc      	b.n	80014ac <_malloc_r+0xb0>
 80014f2:	605b      	str	r3, [r3, #4]
 80014f4:	deff      	udf	#255	; 0xff
 80014f6:	bf00      	nop
 80014f8:	20000298 	.word	0x20000298

080014fc <__malloc_lock>:
 80014fc:	4801      	ldr	r0, [pc, #4]	; (8001504 <__malloc_lock+0x8>)
 80014fe:	f7ff bf11 	b.w	8001324 <__retarget_lock_acquire_recursive>
 8001502:	bf00      	nop
 8001504:	20000294 	.word	0x20000294

08001508 <__malloc_unlock>:
 8001508:	4801      	ldr	r0, [pc, #4]	; (8001510 <__malloc_unlock+0x8>)
 800150a:	f7ff bf0c 	b.w	8001326 <__retarget_lock_release_recursive>
 800150e:	bf00      	nop
 8001510:	20000294 	.word	0x20000294

08001514 <__ssputs_r>:
 8001514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001518:	688e      	ldr	r6, [r1, #8]
 800151a:	461f      	mov	r7, r3
 800151c:	42be      	cmp	r6, r7
 800151e:	680b      	ldr	r3, [r1, #0]
 8001520:	4682      	mov	sl, r0
 8001522:	460c      	mov	r4, r1
 8001524:	4690      	mov	r8, r2
 8001526:	d82c      	bhi.n	8001582 <__ssputs_r+0x6e>
 8001528:	898a      	ldrh	r2, [r1, #12]
 800152a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800152e:	d026      	beq.n	800157e <__ssputs_r+0x6a>
 8001530:	6965      	ldr	r5, [r4, #20]
 8001532:	6909      	ldr	r1, [r1, #16]
 8001534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001538:	eba3 0901 	sub.w	r9, r3, r1
 800153c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001540:	1c7b      	adds	r3, r7, #1
 8001542:	444b      	add	r3, r9
 8001544:	106d      	asrs	r5, r5, #1
 8001546:	429d      	cmp	r5, r3
 8001548:	bf38      	it	cc
 800154a:	461d      	movcc	r5, r3
 800154c:	0553      	lsls	r3, r2, #21
 800154e:	d527      	bpl.n	80015a0 <__ssputs_r+0x8c>
 8001550:	4629      	mov	r1, r5
 8001552:	f7ff ff53 	bl	80013fc <_malloc_r>
 8001556:	4606      	mov	r6, r0
 8001558:	b360      	cbz	r0, 80015b4 <__ssputs_r+0xa0>
 800155a:	6921      	ldr	r1, [r4, #16]
 800155c:	464a      	mov	r2, r9
 800155e:	f000 faeb 	bl	8001b38 <memcpy>
 8001562:	89a3      	ldrh	r3, [r4, #12]
 8001564:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156c:	81a3      	strh	r3, [r4, #12]
 800156e:	6126      	str	r6, [r4, #16]
 8001570:	6165      	str	r5, [r4, #20]
 8001572:	444e      	add	r6, r9
 8001574:	eba5 0509 	sub.w	r5, r5, r9
 8001578:	6026      	str	r6, [r4, #0]
 800157a:	60a5      	str	r5, [r4, #8]
 800157c:	463e      	mov	r6, r7
 800157e:	42be      	cmp	r6, r7
 8001580:	d900      	bls.n	8001584 <__ssputs_r+0x70>
 8001582:	463e      	mov	r6, r7
 8001584:	6820      	ldr	r0, [r4, #0]
 8001586:	4632      	mov	r2, r6
 8001588:	4641      	mov	r1, r8
 800158a:	f000 faab 	bl	8001ae4 <memmove>
 800158e:	68a3      	ldr	r3, [r4, #8]
 8001590:	1b9b      	subs	r3, r3, r6
 8001592:	60a3      	str	r3, [r4, #8]
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	4433      	add	r3, r6
 8001598:	6023      	str	r3, [r4, #0]
 800159a:	2000      	movs	r0, #0
 800159c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a0:	462a      	mov	r2, r5
 80015a2:	f000 fad7 	bl	8001b54 <_realloc_r>
 80015a6:	4606      	mov	r6, r0
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d1e0      	bne.n	800156e <__ssputs_r+0x5a>
 80015ac:	6921      	ldr	r1, [r4, #16]
 80015ae:	4650      	mov	r0, sl
 80015b0:	f7ff feba 	bl	8001328 <_free_r>
 80015b4:	230c      	movs	r3, #12
 80015b6:	f8ca 3000 	str.w	r3, [sl]
 80015ba:	89a3      	ldrh	r3, [r4, #12]
 80015bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c0:	81a3      	strh	r3, [r4, #12]
 80015c2:	f04f 30ff 	mov.w	r0, #4294967295
 80015c6:	e7e9      	b.n	800159c <__ssputs_r+0x88>

080015c8 <_svfiprintf_r>:
 80015c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015cc:	4698      	mov	r8, r3
 80015ce:	898b      	ldrh	r3, [r1, #12]
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	b09d      	sub	sp, #116	; 0x74
 80015d4:	4607      	mov	r7, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	4614      	mov	r4, r2
 80015da:	d50e      	bpl.n	80015fa <_svfiprintf_r+0x32>
 80015dc:	690b      	ldr	r3, [r1, #16]
 80015de:	b963      	cbnz	r3, 80015fa <_svfiprintf_r+0x32>
 80015e0:	2140      	movs	r1, #64	; 0x40
 80015e2:	f7ff ff0b 	bl	80013fc <_malloc_r>
 80015e6:	6028      	str	r0, [r5, #0]
 80015e8:	6128      	str	r0, [r5, #16]
 80015ea:	b920      	cbnz	r0, 80015f6 <_svfiprintf_r+0x2e>
 80015ec:	230c      	movs	r3, #12
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	e0d0      	b.n	8001798 <_svfiprintf_r+0x1d0>
 80015f6:	2340      	movs	r3, #64	; 0x40
 80015f8:	616b      	str	r3, [r5, #20]
 80015fa:	2300      	movs	r3, #0
 80015fc:	9309      	str	r3, [sp, #36]	; 0x24
 80015fe:	2320      	movs	r3, #32
 8001600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001604:	f8cd 800c 	str.w	r8, [sp, #12]
 8001608:	2330      	movs	r3, #48	; 0x30
 800160a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80017b0 <_svfiprintf_r+0x1e8>
 800160e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001612:	f04f 0901 	mov.w	r9, #1
 8001616:	4623      	mov	r3, r4
 8001618:	469a      	mov	sl, r3
 800161a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800161e:	b10a      	cbz	r2, 8001624 <_svfiprintf_r+0x5c>
 8001620:	2a25      	cmp	r2, #37	; 0x25
 8001622:	d1f9      	bne.n	8001618 <_svfiprintf_r+0x50>
 8001624:	ebba 0b04 	subs.w	fp, sl, r4
 8001628:	d00b      	beq.n	8001642 <_svfiprintf_r+0x7a>
 800162a:	465b      	mov	r3, fp
 800162c:	4622      	mov	r2, r4
 800162e:	4629      	mov	r1, r5
 8001630:	4638      	mov	r0, r7
 8001632:	f7ff ff6f 	bl	8001514 <__ssputs_r>
 8001636:	3001      	adds	r0, #1
 8001638:	f000 80a9 	beq.w	800178e <_svfiprintf_r+0x1c6>
 800163c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800163e:	445a      	add	r2, fp
 8001640:	9209      	str	r2, [sp, #36]	; 0x24
 8001642:	f89a 3000 	ldrb.w	r3, [sl]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80a1 	beq.w	800178e <_svfiprintf_r+0x1c6>
 800164c:	2300      	movs	r3, #0
 800164e:	f04f 32ff 	mov.w	r2, #4294967295
 8001652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001656:	f10a 0a01 	add.w	sl, sl, #1
 800165a:	9304      	str	r3, [sp, #16]
 800165c:	9307      	str	r3, [sp, #28]
 800165e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001662:	931a      	str	r3, [sp, #104]	; 0x68
 8001664:	4654      	mov	r4, sl
 8001666:	2205      	movs	r2, #5
 8001668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800166c:	4850      	ldr	r0, [pc, #320]	; (80017b0 <_svfiprintf_r+0x1e8>)
 800166e:	f7fe fdaf 	bl	80001d0 <memchr>
 8001672:	9a04      	ldr	r2, [sp, #16]
 8001674:	b9d8      	cbnz	r0, 80016ae <_svfiprintf_r+0xe6>
 8001676:	06d0      	lsls	r0, r2, #27
 8001678:	bf44      	itt	mi
 800167a:	2320      	movmi	r3, #32
 800167c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001680:	0711      	lsls	r1, r2, #28
 8001682:	bf44      	itt	mi
 8001684:	232b      	movmi	r3, #43	; 0x2b
 8001686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800168a:	f89a 3000 	ldrb.w	r3, [sl]
 800168e:	2b2a      	cmp	r3, #42	; 0x2a
 8001690:	d015      	beq.n	80016be <_svfiprintf_r+0xf6>
 8001692:	9a07      	ldr	r2, [sp, #28]
 8001694:	4654      	mov	r4, sl
 8001696:	2000      	movs	r0, #0
 8001698:	f04f 0c0a 	mov.w	ip, #10
 800169c:	4621      	mov	r1, r4
 800169e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016a2:	3b30      	subs	r3, #48	; 0x30
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d94d      	bls.n	8001744 <_svfiprintf_r+0x17c>
 80016a8:	b1b0      	cbz	r0, 80016d8 <_svfiprintf_r+0x110>
 80016aa:	9207      	str	r2, [sp, #28]
 80016ac:	e014      	b.n	80016d8 <_svfiprintf_r+0x110>
 80016ae:	eba0 0308 	sub.w	r3, r0, r8
 80016b2:	fa09 f303 	lsl.w	r3, r9, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	9304      	str	r3, [sp, #16]
 80016ba:	46a2      	mov	sl, r4
 80016bc:	e7d2      	b.n	8001664 <_svfiprintf_r+0x9c>
 80016be:	9b03      	ldr	r3, [sp, #12]
 80016c0:	1d19      	adds	r1, r3, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	9103      	str	r1, [sp, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bfbb      	ittet	lt
 80016ca:	425b      	neglt	r3, r3
 80016cc:	f042 0202 	orrlt.w	r2, r2, #2
 80016d0:	9307      	strge	r3, [sp, #28]
 80016d2:	9307      	strlt	r3, [sp, #28]
 80016d4:	bfb8      	it	lt
 80016d6:	9204      	strlt	r2, [sp, #16]
 80016d8:	7823      	ldrb	r3, [r4, #0]
 80016da:	2b2e      	cmp	r3, #46	; 0x2e
 80016dc:	d10c      	bne.n	80016f8 <_svfiprintf_r+0x130>
 80016de:	7863      	ldrb	r3, [r4, #1]
 80016e0:	2b2a      	cmp	r3, #42	; 0x2a
 80016e2:	d134      	bne.n	800174e <_svfiprintf_r+0x186>
 80016e4:	9b03      	ldr	r3, [sp, #12]
 80016e6:	1d1a      	adds	r2, r3, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	9203      	str	r2, [sp, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bfb8      	it	lt
 80016f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80016f4:	3402      	adds	r4, #2
 80016f6:	9305      	str	r3, [sp, #20]
 80016f8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80017b4 <_svfiprintf_r+0x1ec>
 80016fc:	7821      	ldrb	r1, [r4, #0]
 80016fe:	2203      	movs	r2, #3
 8001700:	4650      	mov	r0, sl
 8001702:	f7fe fd65 	bl	80001d0 <memchr>
 8001706:	b138      	cbz	r0, 8001718 <_svfiprintf_r+0x150>
 8001708:	9b04      	ldr	r3, [sp, #16]
 800170a:	eba0 000a 	sub.w	r0, r0, sl
 800170e:	2240      	movs	r2, #64	; 0x40
 8001710:	4082      	lsls	r2, r0
 8001712:	4313      	orrs	r3, r2
 8001714:	3401      	adds	r4, #1
 8001716:	9304      	str	r3, [sp, #16]
 8001718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800171c:	4826      	ldr	r0, [pc, #152]	; (80017b8 <_svfiprintf_r+0x1f0>)
 800171e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001722:	2206      	movs	r2, #6
 8001724:	f7fe fd54 	bl	80001d0 <memchr>
 8001728:	2800      	cmp	r0, #0
 800172a:	d038      	beq.n	800179e <_svfiprintf_r+0x1d6>
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <_svfiprintf_r+0x1f4>)
 800172e:	bb1b      	cbnz	r3, 8001778 <_svfiprintf_r+0x1b0>
 8001730:	9b03      	ldr	r3, [sp, #12]
 8001732:	3307      	adds	r3, #7
 8001734:	f023 0307 	bic.w	r3, r3, #7
 8001738:	3308      	adds	r3, #8
 800173a:	9303      	str	r3, [sp, #12]
 800173c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800173e:	4433      	add	r3, r6
 8001740:	9309      	str	r3, [sp, #36]	; 0x24
 8001742:	e768      	b.n	8001616 <_svfiprintf_r+0x4e>
 8001744:	fb0c 3202 	mla	r2, ip, r2, r3
 8001748:	460c      	mov	r4, r1
 800174a:	2001      	movs	r0, #1
 800174c:	e7a6      	b.n	800169c <_svfiprintf_r+0xd4>
 800174e:	2300      	movs	r3, #0
 8001750:	3401      	adds	r4, #1
 8001752:	9305      	str	r3, [sp, #20]
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 0c0a 	mov.w	ip, #10
 800175a:	4620      	mov	r0, r4
 800175c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001760:	3a30      	subs	r2, #48	; 0x30
 8001762:	2a09      	cmp	r2, #9
 8001764:	d903      	bls.n	800176e <_svfiprintf_r+0x1a6>
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0c6      	beq.n	80016f8 <_svfiprintf_r+0x130>
 800176a:	9105      	str	r1, [sp, #20]
 800176c:	e7c4      	b.n	80016f8 <_svfiprintf_r+0x130>
 800176e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001772:	4604      	mov	r4, r0
 8001774:	2301      	movs	r3, #1
 8001776:	e7f0      	b.n	800175a <_svfiprintf_r+0x192>
 8001778:	ab03      	add	r3, sp, #12
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	462a      	mov	r2, r5
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <_svfiprintf_r+0x1f8>)
 8001780:	a904      	add	r1, sp, #16
 8001782:	4638      	mov	r0, r7
 8001784:	f3af 8000 	nop.w
 8001788:	1c42      	adds	r2, r0, #1
 800178a:	4606      	mov	r6, r0
 800178c:	d1d6      	bne.n	800173c <_svfiprintf_r+0x174>
 800178e:	89ab      	ldrh	r3, [r5, #12]
 8001790:	065b      	lsls	r3, r3, #25
 8001792:	f53f af2d 	bmi.w	80015f0 <_svfiprintf_r+0x28>
 8001796:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001798:	b01d      	add	sp, #116	; 0x74
 800179a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800179e:	ab03      	add	r3, sp, #12
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	462a      	mov	r2, r5
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <_svfiprintf_r+0x1f8>)
 80017a6:	a904      	add	r1, sp, #16
 80017a8:	4638      	mov	r0, r7
 80017aa:	f000 f879 	bl	80018a0 <_printf_i>
 80017ae:	e7eb      	b.n	8001788 <_svfiprintf_r+0x1c0>
 80017b0:	08002052 	.word	0x08002052
 80017b4:	08002058 	.word	0x08002058
 80017b8:	0800205c 	.word	0x0800205c
 80017bc:	00000000 	.word	0x00000000
 80017c0:	08001515 	.word	0x08001515

080017c4 <_printf_common>:
 80017c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017c8:	4616      	mov	r6, r2
 80017ca:	4699      	mov	r9, r3
 80017cc:	688a      	ldr	r2, [r1, #8]
 80017ce:	690b      	ldr	r3, [r1, #16]
 80017d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017d4:	4293      	cmp	r3, r2
 80017d6:	bfb8      	it	lt
 80017d8:	4613      	movlt	r3, r2
 80017da:	6033      	str	r3, [r6, #0]
 80017dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80017e0:	4607      	mov	r7, r0
 80017e2:	460c      	mov	r4, r1
 80017e4:	b10a      	cbz	r2, 80017ea <_printf_common+0x26>
 80017e6:	3301      	adds	r3, #1
 80017e8:	6033      	str	r3, [r6, #0]
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	0699      	lsls	r1, r3, #26
 80017ee:	bf42      	ittt	mi
 80017f0:	6833      	ldrmi	r3, [r6, #0]
 80017f2:	3302      	addmi	r3, #2
 80017f4:	6033      	strmi	r3, [r6, #0]
 80017f6:	6825      	ldr	r5, [r4, #0]
 80017f8:	f015 0506 	ands.w	r5, r5, #6
 80017fc:	d106      	bne.n	800180c <_printf_common+0x48>
 80017fe:	f104 0a19 	add.w	sl, r4, #25
 8001802:	68e3      	ldr	r3, [r4, #12]
 8001804:	6832      	ldr	r2, [r6, #0]
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	42ab      	cmp	r3, r5
 800180a:	dc26      	bgt.n	800185a <_printf_common+0x96>
 800180c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001810:	1e13      	subs	r3, r2, #0
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	bf18      	it	ne
 8001816:	2301      	movne	r3, #1
 8001818:	0692      	lsls	r2, r2, #26
 800181a:	d42b      	bmi.n	8001874 <_printf_common+0xb0>
 800181c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001820:	4649      	mov	r1, r9
 8001822:	4638      	mov	r0, r7
 8001824:	47c0      	blx	r8
 8001826:	3001      	adds	r0, #1
 8001828:	d01e      	beq.n	8001868 <_printf_common+0xa4>
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	6922      	ldr	r2, [r4, #16]
 800182e:	f003 0306 	and.w	r3, r3, #6
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf02      	ittt	eq
 8001836:	68e5      	ldreq	r5, [r4, #12]
 8001838:	6833      	ldreq	r3, [r6, #0]
 800183a:	1aed      	subeq	r5, r5, r3
 800183c:	68a3      	ldr	r3, [r4, #8]
 800183e:	bf0c      	ite	eq
 8001840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001844:	2500      	movne	r5, #0
 8001846:	4293      	cmp	r3, r2
 8001848:	bfc4      	itt	gt
 800184a:	1a9b      	subgt	r3, r3, r2
 800184c:	18ed      	addgt	r5, r5, r3
 800184e:	2600      	movs	r6, #0
 8001850:	341a      	adds	r4, #26
 8001852:	42b5      	cmp	r5, r6
 8001854:	d11a      	bne.n	800188c <_printf_common+0xc8>
 8001856:	2000      	movs	r0, #0
 8001858:	e008      	b.n	800186c <_printf_common+0xa8>
 800185a:	2301      	movs	r3, #1
 800185c:	4652      	mov	r2, sl
 800185e:	4649      	mov	r1, r9
 8001860:	4638      	mov	r0, r7
 8001862:	47c0      	blx	r8
 8001864:	3001      	adds	r0, #1
 8001866:	d103      	bne.n	8001870 <_printf_common+0xac>
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001870:	3501      	adds	r5, #1
 8001872:	e7c6      	b.n	8001802 <_printf_common+0x3e>
 8001874:	18e1      	adds	r1, r4, r3
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	2030      	movs	r0, #48	; 0x30
 800187a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800187e:	4422      	add	r2, r4
 8001880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001888:	3302      	adds	r3, #2
 800188a:	e7c7      	b.n	800181c <_printf_common+0x58>
 800188c:	2301      	movs	r3, #1
 800188e:	4622      	mov	r2, r4
 8001890:	4649      	mov	r1, r9
 8001892:	4638      	mov	r0, r7
 8001894:	47c0      	blx	r8
 8001896:	3001      	adds	r0, #1
 8001898:	d0e6      	beq.n	8001868 <_printf_common+0xa4>
 800189a:	3601      	adds	r6, #1
 800189c:	e7d9      	b.n	8001852 <_printf_common+0x8e>
	...

080018a0 <_printf_i>:
 80018a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80018a4:	7e0f      	ldrb	r7, [r1, #24]
 80018a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80018a8:	2f78      	cmp	r7, #120	; 0x78
 80018aa:	4691      	mov	r9, r2
 80018ac:	4680      	mov	r8, r0
 80018ae:	460c      	mov	r4, r1
 80018b0:	469a      	mov	sl, r3
 80018b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80018b6:	d807      	bhi.n	80018c8 <_printf_i+0x28>
 80018b8:	2f62      	cmp	r7, #98	; 0x62
 80018ba:	d80a      	bhi.n	80018d2 <_printf_i+0x32>
 80018bc:	2f00      	cmp	r7, #0
 80018be:	f000 80d4 	beq.w	8001a6a <_printf_i+0x1ca>
 80018c2:	2f58      	cmp	r7, #88	; 0x58
 80018c4:	f000 80c0 	beq.w	8001a48 <_printf_i+0x1a8>
 80018c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80018d0:	e03a      	b.n	8001948 <_printf_i+0xa8>
 80018d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80018d6:	2b15      	cmp	r3, #21
 80018d8:	d8f6      	bhi.n	80018c8 <_printf_i+0x28>
 80018da:	a101      	add	r1, pc, #4	; (adr r1, 80018e0 <_printf_i+0x40>)
 80018dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018e0:	08001939 	.word	0x08001939
 80018e4:	0800194d 	.word	0x0800194d
 80018e8:	080018c9 	.word	0x080018c9
 80018ec:	080018c9 	.word	0x080018c9
 80018f0:	080018c9 	.word	0x080018c9
 80018f4:	080018c9 	.word	0x080018c9
 80018f8:	0800194d 	.word	0x0800194d
 80018fc:	080018c9 	.word	0x080018c9
 8001900:	080018c9 	.word	0x080018c9
 8001904:	080018c9 	.word	0x080018c9
 8001908:	080018c9 	.word	0x080018c9
 800190c:	08001a51 	.word	0x08001a51
 8001910:	08001979 	.word	0x08001979
 8001914:	08001a0b 	.word	0x08001a0b
 8001918:	080018c9 	.word	0x080018c9
 800191c:	080018c9 	.word	0x080018c9
 8001920:	08001a73 	.word	0x08001a73
 8001924:	080018c9 	.word	0x080018c9
 8001928:	08001979 	.word	0x08001979
 800192c:	080018c9 	.word	0x080018c9
 8001930:	080018c9 	.word	0x080018c9
 8001934:	08001a13 	.word	0x08001a13
 8001938:	682b      	ldr	r3, [r5, #0]
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	602a      	str	r2, [r5, #0]
 8001940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001948:	2301      	movs	r3, #1
 800194a:	e09f      	b.n	8001a8c <_printf_i+0x1ec>
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	682b      	ldr	r3, [r5, #0]
 8001950:	0607      	lsls	r7, r0, #24
 8001952:	f103 0104 	add.w	r1, r3, #4
 8001956:	6029      	str	r1, [r5, #0]
 8001958:	d501      	bpl.n	800195e <_printf_i+0xbe>
 800195a:	681e      	ldr	r6, [r3, #0]
 800195c:	e003      	b.n	8001966 <_printf_i+0xc6>
 800195e:	0646      	lsls	r6, r0, #25
 8001960:	d5fb      	bpl.n	800195a <_printf_i+0xba>
 8001962:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001966:	2e00      	cmp	r6, #0
 8001968:	da03      	bge.n	8001972 <_printf_i+0xd2>
 800196a:	232d      	movs	r3, #45	; 0x2d
 800196c:	4276      	negs	r6, r6
 800196e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001972:	485a      	ldr	r0, [pc, #360]	; (8001adc <_printf_i+0x23c>)
 8001974:	230a      	movs	r3, #10
 8001976:	e012      	b.n	800199e <_printf_i+0xfe>
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	6820      	ldr	r0, [r4, #0]
 800197c:	1d19      	adds	r1, r3, #4
 800197e:	6029      	str	r1, [r5, #0]
 8001980:	0605      	lsls	r5, r0, #24
 8001982:	d501      	bpl.n	8001988 <_printf_i+0xe8>
 8001984:	681e      	ldr	r6, [r3, #0]
 8001986:	e002      	b.n	800198e <_printf_i+0xee>
 8001988:	0641      	lsls	r1, r0, #25
 800198a:	d5fb      	bpl.n	8001984 <_printf_i+0xe4>
 800198c:	881e      	ldrh	r6, [r3, #0]
 800198e:	4853      	ldr	r0, [pc, #332]	; (8001adc <_printf_i+0x23c>)
 8001990:	2f6f      	cmp	r7, #111	; 0x6f
 8001992:	bf0c      	ite	eq
 8001994:	2308      	moveq	r3, #8
 8001996:	230a      	movne	r3, #10
 8001998:	2100      	movs	r1, #0
 800199a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800199e:	6865      	ldr	r5, [r4, #4]
 80019a0:	60a5      	str	r5, [r4, #8]
 80019a2:	2d00      	cmp	r5, #0
 80019a4:	bfa2      	ittt	ge
 80019a6:	6821      	ldrge	r1, [r4, #0]
 80019a8:	f021 0104 	bicge.w	r1, r1, #4
 80019ac:	6021      	strge	r1, [r4, #0]
 80019ae:	b90e      	cbnz	r6, 80019b4 <_printf_i+0x114>
 80019b0:	2d00      	cmp	r5, #0
 80019b2:	d04b      	beq.n	8001a4c <_printf_i+0x1ac>
 80019b4:	4615      	mov	r5, r2
 80019b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80019ba:	fb03 6711 	mls	r7, r3, r1, r6
 80019be:	5dc7      	ldrb	r7, [r0, r7]
 80019c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80019c4:	4637      	mov	r7, r6
 80019c6:	42bb      	cmp	r3, r7
 80019c8:	460e      	mov	r6, r1
 80019ca:	d9f4      	bls.n	80019b6 <_printf_i+0x116>
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d10b      	bne.n	80019e8 <_printf_i+0x148>
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	07de      	lsls	r6, r3, #31
 80019d4:	d508      	bpl.n	80019e8 <_printf_i+0x148>
 80019d6:	6923      	ldr	r3, [r4, #16]
 80019d8:	6861      	ldr	r1, [r4, #4]
 80019da:	4299      	cmp	r1, r3
 80019dc:	bfde      	ittt	le
 80019de:	2330      	movle	r3, #48	; 0x30
 80019e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80019e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80019e8:	1b52      	subs	r2, r2, r5
 80019ea:	6122      	str	r2, [r4, #16]
 80019ec:	f8cd a000 	str.w	sl, [sp]
 80019f0:	464b      	mov	r3, r9
 80019f2:	aa03      	add	r2, sp, #12
 80019f4:	4621      	mov	r1, r4
 80019f6:	4640      	mov	r0, r8
 80019f8:	f7ff fee4 	bl	80017c4 <_printf_common>
 80019fc:	3001      	adds	r0, #1
 80019fe:	d14a      	bne.n	8001a96 <_printf_i+0x1f6>
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	b004      	add	sp, #16
 8001a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	f043 0320 	orr.w	r3, r3, #32
 8001a10:	6023      	str	r3, [r4, #0]
 8001a12:	4833      	ldr	r0, [pc, #204]	; (8001ae0 <_printf_i+0x240>)
 8001a14:	2778      	movs	r7, #120	; 0x78
 8001a16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	6829      	ldr	r1, [r5, #0]
 8001a1e:	061f      	lsls	r7, r3, #24
 8001a20:	f851 6b04 	ldr.w	r6, [r1], #4
 8001a24:	d402      	bmi.n	8001a2c <_printf_i+0x18c>
 8001a26:	065f      	lsls	r7, r3, #25
 8001a28:	bf48      	it	mi
 8001a2a:	b2b6      	uxthmi	r6, r6
 8001a2c:	07df      	lsls	r7, r3, #31
 8001a2e:	bf48      	it	mi
 8001a30:	f043 0320 	orrmi.w	r3, r3, #32
 8001a34:	6029      	str	r1, [r5, #0]
 8001a36:	bf48      	it	mi
 8001a38:	6023      	strmi	r3, [r4, #0]
 8001a3a:	b91e      	cbnz	r6, 8001a44 <_printf_i+0x1a4>
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f023 0320 	bic.w	r3, r3, #32
 8001a42:	6023      	str	r3, [r4, #0]
 8001a44:	2310      	movs	r3, #16
 8001a46:	e7a7      	b.n	8001998 <_printf_i+0xf8>
 8001a48:	4824      	ldr	r0, [pc, #144]	; (8001adc <_printf_i+0x23c>)
 8001a4a:	e7e4      	b.n	8001a16 <_printf_i+0x176>
 8001a4c:	4615      	mov	r5, r2
 8001a4e:	e7bd      	b.n	80019cc <_printf_i+0x12c>
 8001a50:	682b      	ldr	r3, [r5, #0]
 8001a52:	6826      	ldr	r6, [r4, #0]
 8001a54:	6961      	ldr	r1, [r4, #20]
 8001a56:	1d18      	adds	r0, r3, #4
 8001a58:	6028      	str	r0, [r5, #0]
 8001a5a:	0635      	lsls	r5, r6, #24
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	d501      	bpl.n	8001a64 <_printf_i+0x1c4>
 8001a60:	6019      	str	r1, [r3, #0]
 8001a62:	e002      	b.n	8001a6a <_printf_i+0x1ca>
 8001a64:	0670      	lsls	r0, r6, #25
 8001a66:	d5fb      	bpl.n	8001a60 <_printf_i+0x1c0>
 8001a68:	8019      	strh	r1, [r3, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	6123      	str	r3, [r4, #16]
 8001a6e:	4615      	mov	r5, r2
 8001a70:	e7bc      	b.n	80019ec <_printf_i+0x14c>
 8001a72:	682b      	ldr	r3, [r5, #0]
 8001a74:	1d1a      	adds	r2, r3, #4
 8001a76:	602a      	str	r2, [r5, #0]
 8001a78:	681d      	ldr	r5, [r3, #0]
 8001a7a:	6862      	ldr	r2, [r4, #4]
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f7fe fba6 	bl	80001d0 <memchr>
 8001a84:	b108      	cbz	r0, 8001a8a <_printf_i+0x1ea>
 8001a86:	1b40      	subs	r0, r0, r5
 8001a88:	6060      	str	r0, [r4, #4]
 8001a8a:	6863      	ldr	r3, [r4, #4]
 8001a8c:	6123      	str	r3, [r4, #16]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a94:	e7aa      	b.n	80019ec <_printf_i+0x14c>
 8001a96:	6923      	ldr	r3, [r4, #16]
 8001a98:	462a      	mov	r2, r5
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	47d0      	blx	sl
 8001aa0:	3001      	adds	r0, #1
 8001aa2:	d0ad      	beq.n	8001a00 <_printf_i+0x160>
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	079b      	lsls	r3, r3, #30
 8001aa8:	d413      	bmi.n	8001ad2 <_printf_i+0x232>
 8001aaa:	68e0      	ldr	r0, [r4, #12]
 8001aac:	9b03      	ldr	r3, [sp, #12]
 8001aae:	4298      	cmp	r0, r3
 8001ab0:	bfb8      	it	lt
 8001ab2:	4618      	movlt	r0, r3
 8001ab4:	e7a6      	b.n	8001a04 <_printf_i+0x164>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	4632      	mov	r2, r6
 8001aba:	4649      	mov	r1, r9
 8001abc:	4640      	mov	r0, r8
 8001abe:	47d0      	blx	sl
 8001ac0:	3001      	adds	r0, #1
 8001ac2:	d09d      	beq.n	8001a00 <_printf_i+0x160>
 8001ac4:	3501      	adds	r5, #1
 8001ac6:	68e3      	ldr	r3, [r4, #12]
 8001ac8:	9903      	ldr	r1, [sp, #12]
 8001aca:	1a5b      	subs	r3, r3, r1
 8001acc:	42ab      	cmp	r3, r5
 8001ace:	dcf2      	bgt.n	8001ab6 <_printf_i+0x216>
 8001ad0:	e7eb      	b.n	8001aaa <_printf_i+0x20a>
 8001ad2:	2500      	movs	r5, #0
 8001ad4:	f104 0619 	add.w	r6, r4, #25
 8001ad8:	e7f5      	b.n	8001ac6 <_printf_i+0x226>
 8001ada:	bf00      	nop
 8001adc:	08002063 	.word	0x08002063
 8001ae0:	08002074 	.word	0x08002074

08001ae4 <memmove>:
 8001ae4:	4288      	cmp	r0, r1
 8001ae6:	b510      	push	{r4, lr}
 8001ae8:	eb01 0402 	add.w	r4, r1, r2
 8001aec:	d902      	bls.n	8001af4 <memmove+0x10>
 8001aee:	4284      	cmp	r4, r0
 8001af0:	4623      	mov	r3, r4
 8001af2:	d807      	bhi.n	8001b04 <memmove+0x20>
 8001af4:	1e43      	subs	r3, r0, #1
 8001af6:	42a1      	cmp	r1, r4
 8001af8:	d008      	beq.n	8001b0c <memmove+0x28>
 8001afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b02:	e7f8      	b.n	8001af6 <memmove+0x12>
 8001b04:	4402      	add	r2, r0
 8001b06:	4601      	mov	r1, r0
 8001b08:	428a      	cmp	r2, r1
 8001b0a:	d100      	bne.n	8001b0e <memmove+0x2a>
 8001b0c:	bd10      	pop	{r4, pc}
 8001b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001b16:	e7f7      	b.n	8001b08 <memmove+0x24>

08001b18 <_sbrk_r>:
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4d06      	ldr	r5, [pc, #24]	; (8001b34 <_sbrk_r+0x1c>)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4608      	mov	r0, r1
 8001b22:	602b      	str	r3, [r5, #0]
 8001b24:	f7ff fb54 	bl	80011d0 <_sbrk>
 8001b28:	1c43      	adds	r3, r0, #1
 8001b2a:	d102      	bne.n	8001b32 <_sbrk_r+0x1a>
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	b103      	cbz	r3, 8001b32 <_sbrk_r+0x1a>
 8001b30:	6023      	str	r3, [r4, #0]
 8001b32:	bd38      	pop	{r3, r4, r5, pc}
 8001b34:	20000290 	.word	0x20000290

08001b38 <memcpy>:
 8001b38:	440a      	add	r2, r1
 8001b3a:	4291      	cmp	r1, r2
 8001b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b40:	d100      	bne.n	8001b44 <memcpy+0xc>
 8001b42:	4770      	bx	lr
 8001b44:	b510      	push	{r4, lr}
 8001b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b4e:	4291      	cmp	r1, r2
 8001b50:	d1f9      	bne.n	8001b46 <memcpy+0xe>
 8001b52:	bd10      	pop	{r4, pc}

08001b54 <_realloc_r>:
 8001b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b58:	4680      	mov	r8, r0
 8001b5a:	4614      	mov	r4, r2
 8001b5c:	460e      	mov	r6, r1
 8001b5e:	b921      	cbnz	r1, 8001b6a <_realloc_r+0x16>
 8001b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b64:	4611      	mov	r1, r2
 8001b66:	f7ff bc49 	b.w	80013fc <_malloc_r>
 8001b6a:	b92a      	cbnz	r2, 8001b78 <_realloc_r+0x24>
 8001b6c:	f7ff fbdc 	bl	8001328 <_free_r>
 8001b70:	4625      	mov	r5, r4
 8001b72:	4628      	mov	r0, r5
 8001b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b78:	f000 f81b 	bl	8001bb2 <_malloc_usable_size_r>
 8001b7c:	4284      	cmp	r4, r0
 8001b7e:	4607      	mov	r7, r0
 8001b80:	d802      	bhi.n	8001b88 <_realloc_r+0x34>
 8001b82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001b86:	d812      	bhi.n	8001bae <_realloc_r+0x5a>
 8001b88:	4621      	mov	r1, r4
 8001b8a:	4640      	mov	r0, r8
 8001b8c:	f7ff fc36 	bl	80013fc <_malloc_r>
 8001b90:	4605      	mov	r5, r0
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d0ed      	beq.n	8001b72 <_realloc_r+0x1e>
 8001b96:	42bc      	cmp	r4, r7
 8001b98:	4622      	mov	r2, r4
 8001b9a:	4631      	mov	r1, r6
 8001b9c:	bf28      	it	cs
 8001b9e:	463a      	movcs	r2, r7
 8001ba0:	f7ff ffca 	bl	8001b38 <memcpy>
 8001ba4:	4631      	mov	r1, r6
 8001ba6:	4640      	mov	r0, r8
 8001ba8:	f7ff fbbe 	bl	8001328 <_free_r>
 8001bac:	e7e1      	b.n	8001b72 <_realloc_r+0x1e>
 8001bae:	4635      	mov	r5, r6
 8001bb0:	e7df      	b.n	8001b72 <_realloc_r+0x1e>

08001bb2 <_malloc_usable_size_r>:
 8001bb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bb6:	1f18      	subs	r0, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bfbc      	itt	lt
 8001bbc:	580b      	ldrlt	r3, [r1, r0]
 8001bbe:	18c0      	addlt	r0, r0, r3
 8001bc0:	4770      	bx	lr
	...

08001bc4 <_init>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	bf00      	nop
 8001bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bca:	bc08      	pop	{r3}
 8001bcc:	469e      	mov	lr, r3
 8001bce:	4770      	bx	lr

08001bd0 <_fini>:
 8001bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd2:	bf00      	nop
 8001bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bd6:	bc08      	pop	{r3}
 8001bd8:	469e      	mov	lr, r3
 8001bda:	4770      	bx	lr
